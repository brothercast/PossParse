Changelog Summary (Version 202502260079):
The analysis of the provided `routes.py` and `ai_service.py` files indicates **no functional code changes** between Version `202502260078` and `202502260079`.

The key update is primarily administrative:

*   **Version Number Increment:** The project version has been updated from `202502260078` to `202502260079`.

*Note: The "BUG FIX #1" comments in `routes.py` and the "FIX" comments in `ai_service.py` were already present in the *previous* version (202502260078) and are not new changes in this specific version update.*

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë SSPEC PossPath Essential Files ‚ïë
‚ïë Date: 2025-10-29               ‚ïë
‚ïë Version: 202502260079          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïùüåê Structured Speculation Possibility Pathfinder ("SSPEC PossPath") for short.
Your task is to develop the Flask Web App as an innovative tool for mass collaboration.
Essential app files:
üü• routes.py:
# routes.py (Refactored Version with create_cos route)
from flask import Blueprint, render_template, request, flash, redirect, url_for, jsonify, make_response, current_app, send_from_directory
import os
import json
import uuid
import pdfkit
import logging
import asyncio
from bs4 import BeautifulSoup
from app import app, USE_DATABASE # app is needed for app_context
from uuid import UUID
from utilities import generate_goal, analyze_user_input, generate_sentiment_analysis, generate_ssol_id
from utilities import generate_outcome_data, generate_ssol_image as util_generate_ssol_image
from dotenv import load_dotenv
from ce_nodes import NODES
from werkzeug.exceptions import BadRequest, NotFound
from ce_templates import generate_dynamic_modal, generate_ai_data
from speculate import get_ce_by_id as speculate_get_ce_by_id, \
                      update_ce_by_id as speculate_update_ce_by_id, \
                      create_cos as speculate_create_cos, \
                      get_cos_by_id as speculate_get_cos_by_id, \
                      update_cos_by_id as speculate_update_cos_by_id, \
                      delete_cos_by_id as speculate_delete_cos_by_id, \
                      analyze_cos as speculate_analyze_cos # Added analyze_cos alias
from models import get_engine_and_session, SSOL, COS # Import COS for type checking if needed
from urllib.parse import urlparse

load_dotenv()

routes_bp = Blueprint('routes_bp', __name__)

# --- Utility Route ---
@routes_bp.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(current_app.root_path, 'static'), 'favicon.ico', mimetype='image/vnd.microsoft.icon')


# --- Basic Pages ---
@routes_bp.route('/')
def index():
    return render_template('input.html')


@routes_bp.route('/about')
def about():
    return render_template('about.html')


# --- Goal Selection ---
@routes_bp.route('/goal_selection', methods=['POST'])
async def goal_selection():
    if request.method == 'POST':
        user_input = request.form['user_text'].strip()
        if not user_input:
            flash("Please enter your possibility or goal.", "error")
            return render_template('input.html')
        try:
            logging.info(f"User Input: '{user_input}'. Calling generate_goal...")
            goal_options = await generate_goal(user_input)
            logging.debug(f"generate_goal returned: {goal_options}")
            if not goal_options:
                flash("Could not generate goal options. Please try again.", "warning")
                return render_template('input.html')

            # Image generation can start here, but ensure it doesn't block response
            # For DB mode, we need an ssol_id. For non-DB, we might use goal title.
            # This part needs to align with how ssol_id is established later.
            # For now, let's assume image generation is tied to outcome creation more directly.

            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return jsonify(goals=goal_options, user_input=user_input)

            return render_template('goal_selection.html', goals=goal_options, user_input=user_input)
        except ValueError as e:
            flash(str(e), "error")
            logging.error(f"ValueError in goal_selection: {e}", exc_info=True)
            return render_template('input.html', user_text=user_input, error_message=str(e))
        except Exception as e:
            flash("An unexpected error occurred. Please try again.", "error")
            logging.error(f"Unexpected error in goal_selection: {e}", exc_info=True)
            return render_template('input.html', user_text=user_input, error_message=str(e))
    return redirect(url_for('routes_bp.index'))


# --- Outcome Generation ---
@routes_bp.route('/outcome', methods=['POST'])
async def outcome():
    if request.method == 'POST':
        logging.info(f"Outcome route - Form data received: {request.form}")
        selected_goal_text = request.form.get('selected_goal', '').strip()
        domain = request.form.get('domain', '').strip()
        selected_goal_title = request.form.get('selected_goal_title', '').strip()
        domain_icon = request.form.get('domain_icon', '').strip()

        if not selected_goal_text:
            flash("No goal selected. Please select a goal.", "error")
            return redirect(url_for('routes_bp.index'))
        try:
            outcome_data = await generate_outcome_data(USE_DATABASE, request, 'POST', selected_goal_text, domain, domain_icon, selected_goal_title)
            ssol_id_str = outcome_data['ssol_id']
            
            current_app.logger.info(f"SSOL ID: {ssol_id_str}. Preparing to generate image.")

            image_prompt_context = selected_goal_title if selected_goal_title else selected_goal_text
            image_prompt = (
                f"A colorful, charming, and visually stunning diorama in the style of 'It's a Small World', "
                f"depicting '{image_prompt_context}' as a fulfilled goal in the domain of '{domain}'. "
                f"The scene should include diverse people, use an isometric perspective, and have a 1:1 square aspect ratio. "
                f"The artwork should evoke a mid-century modern aesthetic, reminiscent of 1960s illustration. "
                f"Do not include any text or labels."
            )
            
            current_app.logger.info(f"Attempting to generate image for SSOL {ssol_id_str} synchronously (awaiting)...")
            # AWAIT the image generation directly for debugging
            image_web_path = await util_generate_ssol_image(image_prompt, ssol_id=ssol_id_str)
            current_app.logger.info(f"Image generation returned path: {image_web_path} for SSOL {ssol_id_str}")
            
            # Optionally, update outcome_data if the template uses a direct image path variable from ssol
            # For now, we assume outcome.html's JS fetches it.

            return render_template('outcome.html', ssol=outcome_data, nodes=NODES, ssol_id=ssol_id_str, selected_goal_title=selected_goal_title)
        except Exception as e:
            current_app.logger.error(f"Error generating outcome data or image: {e}", exc_info=True)
            flash("Error processing your request. Please try again.", "error") # More generic error
            return redirect(url_for('routes_bp.index')) # Redirect to index on major error
    return redirect(url_for('routes_bp.index'))


# --- Input Analysis ---
@routes_bp.route('/analyze_input', methods=['POST'])
async def analyze_input_route():
    if request.method == 'POST':
        user_text = request.form.get('user_text')
        if not user_text:
            return jsonify({'error': 'No text provided'}), 400
        try:
            keywords = await analyze_user_input(user_text)
            sentiment = await generate_sentiment_analysis(user_text)
            return jsonify({'keywords': keywords, 'sentiment': sentiment})
        except Exception as e:
            logging.error(f"Error analyzing user input: {e}", exc_info=True)
            return jsonify({'error': 'Error analyzing input'}), 500
    return jsonify({'error': 'Invalid request method'}), 405


# --- PDF Export ---
@routes_bp.route('/save_as_pdf/<uuid:ssol_id>', methods=['POST'])
def save_as_pdf(ssol_id):
    try:
        data = request.get_json()
        if not data or 'htmlContent' not in data:
            raise ValueError("Invalid request: No HTML content provided.")
        html_content = data['htmlContent']

        # Path to your CSS file
        css_file_path = os.path.join(current_app.root_path, 'static', 'styles.css')
        if not os.path.exists(css_file_path):
             current_app.logger.error(f"CSS file not found at: {css_file_path}") # Log error
             # Fallback or error, but for now let's proceed without it if not found, pdfkit might still work
             css_param = None
        else:
            css_param = css_file_path

        # Ensure local file access for images, etc.
        # Replace relative static paths with absolute local file paths or external URLs
        # This example assumes static files are served from the root. Adjust if using a prefix.
        # For local file access, it's often better to point to the file system path.
        # However, for images served via Flask, _external=True should generate correct URLs.
        html_content = html_content.replace('src="/static/', f'src="{url_for("static", filename="", _external=True)}')
        # For local file system paths (requires enable-local-file-access):
        # html_content = html_content.replace('src="/static/', 'src="' + os.path.join(current_app.static_folder,''))


        options = {
            "page-size": "Letter",
            "margin-top": "0.75in",
            "margin-right": "0.75in",
            "margin-bottom": "0.75in",
            "margin-left": "0.75in",
            "encoding": "UTF-8",
            "no-outline": None,
            "enable-local-file-access": None, # Crucial for local images/CSS if not inlined
        }

        pdf = pdfkit.from_string(html_content, False, options=options, css=css_param)

        response = make_response(pdf)
        response.headers['Content-Type'] = 'application/pdf'
        response.headers['Content-Disposition'] = f'attachment; filename="SSPEC_Solution_{ssol_id}.pdf"'
        return response

    except Exception as e:
        current_app.logger.error(f"Exception in save_as_pdf for SSOL {ssol_id}: {e}", exc_info=True)
        return jsonify(success=False, error=str(e)), 500

# --- COS CRUD Routes ---

# routes.py (Refactored create_cos_route with proper error handling)

# ... (other imports and routes) ...

@routes_bp.route('/create_cos', methods=['POST'])
async def create_cos_route():
    try:
        data = request.get_json()
        if not data:
            raise BadRequest('No JSON payload received.')

        content = data.get('content')
        status = data.get('status', 'Proposed') # Default status
        ssol_id_str = data.get('ssol_id')
        accountable_party = data.get('accountable_party')
        completion_date = data.get('completion_date') # Should be ISO format string or None

        if not content or not ssol_id_str:
            raise BadRequest('Missing required fields: content and ssol_id are required.')

        try:
            ssol_id_uuid = UUID(ssol_id_str)
        except ValueError:
            raise BadRequest(f"Invalid ssol_id format: '{ssol_id_str}'. Must be a valid UUID.")

        # speculate_create_cos handles DB/in-memory logic and analysis.
        new_cos_id_str = await speculate_create_cos(
            USE_DATABASE,
            ssol_id=ssol_id_uuid, # Pass UUID object
            content=content,
            status=status,
            accountable_party=accountable_party,
            completion_date=completion_date
        )

        if not new_cos_id_str:
            # This is a critical failure within the speculate function
            raise Exception("Failed to create COS record in the data store.")

        # Fetch the newly created COS to get its full data, including processed content
        created_cos = None
        if USE_DATABASE:
            with app.app_context(): # Ensure app context for DB operations
                # speculate_get_cos_by_id expects a UUID object if db, string if not
                created_cos = speculate_get_cos_by_id(USE_DATABASE, UUID(new_cos_id_str))
        else:
            created_cos = speculate_get_cos_by_id(USE_DATABASE, new_cos_id_str)

        if not created_cos:
             current_app.logger.error(f"Failed to retrieve newly created COS with ID: {new_cos_id_str}")
             # Return an error if retrieval fails post-creation
             return jsonify(success=False, error="COS was created but could not be retrieved immediately."), 500

        # Convert to dictionary for JSON response
        cos_dict = created_cos.to_dict() if USE_DATABASE else created_cos

        return jsonify(success=True, cos=cos_dict), 201 # 201 Created

    except BadRequest as e:
        current_app.logger.warning(f"BadRequest in create_cos_route: {e}")
        return jsonify(success=False, error=str(e)), 400
        
    except Exception as e:
        current_app.logger.error(f"Error creating COS: {e}", exc_info=True)
   
        return jsonify(success=False, error="An unexpected error occurred while creating the COS."), 500

@routes_bp.route('/update_cos/<uuid:cos_id>', methods=['PUT'])
async def update_cos_route(cos_id): # Changed to async to allow await on speculate_update_cos_by_id if it becomes async
    try:
        data = request.get_json()
        if not data:
            raise BadRequest('No JSON payload received')
        cos_id_str = str(cos_id) # Ensure it's a string for in-memory store key if not using UUID object

        # speculate_update_cos_by_id handles USE_DATABASE context internally
        # It might become async if it involves AI re-analysis for CE pills.
        # For now, assuming it's synchronous but can be awaited if needed.
        update_result = await speculate_update_cos_by_id(USE_DATABASE, cos_id, data) # Pass UUID obj

        if update_result['success']:
            return jsonify(success=True, cos=update_result['cos']), 200
        return jsonify(success=False, error=update_result['message']), update_result.get('status_code', 404)
    except BadRequest as e:
        return jsonify(success=False, error=str(e)), 400
    except Exception as e:
        current_app.logger.error(f"Error updating COS {cos_id}: {e}", exc_info=True)
        return jsonify(success=False, error="An unexpected error occurred."), 500


@routes_bp.route('/delete_cos/<uuid:cos_id>', methods=['DELETE'])
def delete_cos_route(cos_id):
    # speculate_delete_cos_by_id handles USE_DATABASE context internally
    try:
        success = speculate_delete_cos_by_id(USE_DATABASE, cos_id) # Pass UUID obj

        if success:
            return jsonify(success=True), 200
        return jsonify(success=False, error="COS not found or could not be deleted."), 404
    except Exception as e:
        current_app.logger.error(f"Error deleting COS {cos_id}: {e}", exc_info=True)
        return jsonify(success=False, error="An unexpected error occurred."), 500


# --- SSOL Image ---
@routes_bp.route('/get_ssol_image/<uuid:ssol_id>') # Keep uuid converter for type safety
async def get_ssol_image_route(ssol_id): # Renamed parameter to avoid clash with module
    ssol_id_str = str(ssol_id)
    image_filename = f"ssol_image_{ssol_id_str}.png" # Standard naming convention
    image_web_path_relative = os.path.join('images', image_filename).replace("\\", "/")
    image_fs_path = os.path.join(current_app.static_folder, 'images', image_filename)

    current_app.logger.info(f"GET_SSOL_IMAGE: Checking for {image_fs_path}")

    if os.path.exists(image_fs_path):
        current_app.logger.info(f"GET_SSOL_IMAGE: Found image {image_filename} for SSOL {ssol_id_str}.")
        return jsonify({'image_path': url_for('static', filename=image_web_path_relative), 'status': 'found'})
    else:
        current_app.logger.warning(f"GET_SSOL_IMAGE: Image {image_filename} for SSOL {ssol_id_str} not found at {image_fs_path}. It might still be generating.")
        # Return a specific status so client can retry or use default
        return jsonify({
            'image_path': url_for('static', filename='images/sspec_default.png'), # Provide default
            'status': 'pending_or_not_found', 
            'message': 'Image is processing or was not found. Displaying default.'
        }), 200 # Return 200 but with a status indicator

# --- CE Routes ---
@routes_bp.route('/get_ce_by_id', methods=['GET'])
def get_ce_by_id_route():
    ce_id_str = request.args.get('ce_id')
    if not ce_id_str:
        return jsonify(error="Missing 'ce_id' parameter"), 400
    try:
        ce_id = UUID(ce_id_str) # Convert to UUID
        # speculate_get_ce_by_id handles USE_DATABASE context
        ce = speculate_get_ce_by_id(USE_DATABASE, ce_id)

        if ce:
            return jsonify(ce=ce.to_dict() if USE_DATABASE else ce) # to_dict if model, else it's already dict
        return jsonify(error="CE not found"), 404

    except ValueError:
        return jsonify(error=f"Invalid CE ID format: {ce_id_str}"), 400
    except Exception as e:
        current_app.logger.error(f"Error getting CE {ce_id_str}: {e}", exc_info=True)
        return jsonify(error="An unexpected error occurred."), 500


@routes_bp.route('/analyze_cos/<uuid:cos_id>', methods=['GET']) # Changed to expect UUID
async def analyze_cos_by_id_route(cos_id): # Renamed from analyze_cos_by_id
    # speculate_analyze_cos handles USE_DATABASE context
    try:
        # First, get the COS content
        if USE_DATABASE:
            with app.app_context():
                engine, session = get_engine_and_session()
                cos_instance = session.query(COS).get(cos_id)
                session.close()
                if not cos_instance:
                    return jsonify({'success': False, 'message': 'COS not found'}), 404
                cos_content_to_analyze = cos_instance.content
        else:
            from store import cos_store
            cos_data = cos_store.get(str(cos_id))
            if not cos_data:
                return jsonify({'success': False, 'message': 'COS not found'}), 404
            cos_content_to_analyze = cos_data['content']
        
        # Now analyze its content
        # Pass cos_id (as string) for potential use within analyze_cos if it needs to link CEs back
        analysis_results = await speculate_analyze_cos(cos_content_to_analyze, str(cos_id))
        
        # If the analysis also updated the COS content in the database (e.g. added pills)
        # we might want to return the fresh COS object or its content.
        # For now, just returning analysis_results as per previous structure.
        return jsonify({'success': True, 'analysis_results': analysis_results}), 200

    except Exception as e:
        current_app.logger.error(f"Error analyzing COS {cos_id}: {e}", exc_info=True)
        return jsonify({'success': False, 'message': 'An unexpected error occurred during analysis.'}), 500


@routes_bp.route('/get_ce_modal/<string:ce_type>', methods=['POST'])
async def get_ce_modal_route(ce_type):
    try:
        data = request.get_json()
        current_app.logger.debug(f"get_ce_modal_route - request.get_json() data: {data}")

        ce_id_str = data.get('ce_id')
        ce_id_obj = UUID(ce_id_str) if ce_id_str else None

        ce_instance_or_dict = speculate_get_ce_by_id(USE_DATABASE, ce_id_obj) if ce_id_obj else None
        
        ce_data_for_modal = {}
        if ce_instance_or_dict:
            if USE_DATABASE and hasattr(ce_instance_or_dict, 'to_dict'):
                ce_data_for_modal = ce_instance_or_dict.to_dict()
            elif not USE_DATABASE and isinstance(ce_instance_or_dict, dict):
                 ce_data_for_modal = ce_instance_or_dict
            if 'id' in ce_data_for_modal and isinstance(ce_data_for_modal['id'], UUID):
                ce_data_for_modal['id'] = str(ce_data_for_modal['id'])

        # --- BUG FIX #1: Strip HTML from COS content before sending to AI ---
        cos_content_html = data.get('cos_content', '')
        # Use BeautifulSoup to get only the text
        soup = BeautifulSoup(cos_content_html, 'html.parser')
        cos_content_text_only = soup.get_text(separator=' ', strip=True)
        # --- End Bug Fix ---

        phase_name = data.get('phase_name', '')
        phase_index = data.get('phase_index', 0)
        ssol_goal = data.get('ssol_goal','')
        existing_ces = data.get('existing_ces', [])

        ai_generated_data_for_modal = {}
        if ce_type:
             # --- BUG FIX #1 (cont'd): Pass the cleaned text to the AI ---
             ai_generated_data_for_modal = await generate_ai_data(cos_content_text_only, ce_id_str, ce_type, ssol_goal, existing_ces)

        from store import ce_store as in_memory_ce_store
        modal_html = await generate_dynamic_modal(
            ce_type,
            ce_data=ce_data_for_modal,
            # --- Pass the original HTML content with pills to the template for display ---
            cos_content=cos_content_html, 
            ai_generated_data=ai_generated_data_for_modal,
            phase_name=phase_name,
            phase_index=phase_index,
            ce_store=in_memory_ce_store
        )

        return jsonify(modal_html=modal_html, ai_generated_data=ai_generated_data_for_modal)

    except ValueError as ve:
        current_app.logger.error(f"ValueError in get_ce_modal: {ve}", exc_info=True)
        return jsonify(error=f"Invalid data format: {str(ve)}"), 400
    except Exception as e:
        current_app.logger.error(f"Error generating CE modal for type {ce_type}: {e}", exc_info=True)
        return jsonify(error=f"An error occurred: {str(e)}"), 500


@routes_bp.route('/ai-query-endpoint', methods=['POST'])
async def ai_query_route():
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'No JSON payload received'}), 400

        ce_type = data.get('ce_type')
        cos_content = data.get('cos_content')
        ce_id = data.get('ce_id') # This could be string or None
        ssol_goal = data.get('ssol_goal')
        existing_ces = data.get('existing_ces', [])

        if not ce_type or not cos_content or not ssol_goal:
            return jsonify({'error': 'Missing required parameters: ce_type, cos_content, ssol_goal'}), 400

        ai_response = await generate_ai_data(cos_content, ce_id, ce_type, ssol_goal, existing_ces)

        return jsonify({'success': True, 'ai_response': ai_response})

    except Exception as e:
        current_app.logger.error(f"Error in ai_query_route: {e}", exc_info=True)
        return jsonify({'success': False, 'error': str(e)}), 500


@routes_bp.route('/update_ce/<uuid:ce_id>', methods=['PUT'])
def update_ce_route(ce_id): # ce_id is already a UUID object from Flask's converter
    try:
        data = request.get_json()
        if not data:
            raise BadRequest('No JSON payload received')

        # speculate_update_ce_by_id handles USE_DATABASE context
        success = speculate_update_ce_by_id(USE_DATABASE, ce_id, data) # Pass UUID object

        if success:
            # Optionally, fetch and return the updated CE data
            updated_ce_obj = speculate_get_ce_by_id(USE_DATABASE, ce_id)
            if updated_ce_obj:
                ce_data = updated_ce_obj.to_dict() if USE_DATABASE else updated_ce_obj
                return jsonify(success=True, ce=ce_data), 200
            return jsonify(success=True, message="CE updated but could not be retrieved."), 200
        return jsonify(success=False, error="CE not found or could not be updated"), 404
    except BadRequest as e:
        return jsonify(success=False, error=str(e)), 400
    except Exception as e:
        current_app.logger.error(f"Error updating CE {ce_id}: {e}", exc_info=True)
        return jsonify(success=False, error="An unexpected error occurred."), 500

üüß ai_service.py:
# ai_service.py 
import os
import json
import uuid
import logging
import asyncio
from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv
from flask import current_app
from ce_nodes import get_valid_node_types
from openai import AzureOpenAI
import re
import aiohttp

# Load environment variables
load_dotenv()
google_gemini_api_key = os.environ["GOOGLE_GEMINI_API"]
gemini_model_name = os.getenv("GEMINI_MODEL_NAME", "gemini-1.5-pro-latest")
gemini_image_model_name = os.getenv("GEMINI_IMAGE_MODEL_NAME", "models/gemini-1.5-flash-latest")

# Initialize Gemini client
gemini_client = genai.Client(api_key=google_gemini_api_key)

async def send_request_to_gemini(messages, generation_config=None, logger=None):
    """
    Asynchronously sends a request to the Google Gemini API and returns the response.
    This function now expects that any 'system' roles have already been converted.
    """
    if logger is None:
        logger = current_app.logger
    try:
        logger.debug(f"Sending request to Gemini with messages: {messages}")

        contents = []
        for message in messages:
            if isinstance(message, dict) and 'role' in message and 'content' in message:
                role = message['role']
                # --- FIX: REMOVED THE 'system' ROLE CHECK ---
                # We now only expect 'user' or 'model'.
                if role not in ("user", "model"):
                    raise ValueError(f"Invalid role: {role}. Role must be 'user' or 'model'.")
                contents.append(
                    types.Content(
                        role=role,
                        parts=[types.Part(text=message['content'])]
                    )
                )
            else:
                logger.warning(f"Invalid message format: {message}. Skipping this message.")

        if generation_config is None:
            generation_config = types.GenerateContentConfig(safety_settings=[])
        elif isinstance(generation_config, dict):
            generation_config.setdefault('safety_settings', [])
            generation_config = types.GenerateContentConfig(**generation_config)

        response = await gemini_client.aio.models.generate_content(
            model=gemini_model_name,
            contents=contents,
            config=generation_config
        )
        logger.debug(f"Gemini API response: {response.text}")
        return response.text

    except Exception as e:
        logger.error(f"Error sending request to Gemini API: {e}", exc_info=True)
        raise

async def generate_chat_response(messages, role, task, model=None, temperature=0.75, retries=3, backoff_factor=2, logger=None, generation_config=None, system_instruction=None):
    if logger is None:
        logger = current_app.logger
    
    # --- System role processing remains the same ---
    processed_messages = []
    for msg in messages:
        if msg.get('role') == 'system':
            if not processed_messages or processed_messages[0].get('role') != 'user':
                processed_messages.insert(0, {'role': 'user', 'content': msg['content']})
            else:
                processed_messages[0]['content'] = f"{msg['content']}\n\n{processed_messages[0]['content']}"
        else:
            processed_messages.append(msg)
    
    if system_instruction:
        if not processed_messages or processed_messages[0].get('role') != 'user':
            processed_messages.insert(0, {'role': 'user', 'content': system_instruction})
        else:
            processed_messages[0]['content'] = f"{system_instruction}\n\n{processed_messages[0]['content']}"

    if generation_config is None:
        generation_config = types.GenerateContentConfig(
            temperature=temperature,
            top_p=0.95,
            top_k=40,
            max_output_tokens=2048,
            safety_settings=[]
        )
    elif isinstance(generation_config, dict):
        generation_config.setdefault('safety_settings', [])
        generation_config = types.GenerateContentConfig(**generation_config)

    last_exception = None
    for retry_attempt in range(retries):
        try:
            logger.debug(f"Sending request to Gemini (attempt {retry_attempt + 1})")
            raw_response = await send_request_to_gemini(processed_messages, generation_config, logger)

            # --- FIX: More robust regex for JSON extraction ---
            # This handles optional "json" language tag and surrounding whitespace.
            match = re.search(r"```(?:json)?\s*\n(.*?)\s*```", raw_response, re.DOTALL)
            
            if match:
                response_content = match.group(1).strip()
            else:
                response_content = raw_response
                # This warning is now more meaningful, as it will only trigger if there's truly no markdown block.
                logger.warning(f"No JSON markdown block found in Gemini response. Using raw response. Response: {response_content}")
            
            logger.debug(f"Gemini API response (extracted): {response_content}")
            return response_content

        except Exception as e:
            last_exception = e
            if retry_attempt < retries - 1:
                sleep_time = backoff_factor ** (retry_attempt + 1)
                logger.warning(f"Error in generate_chat_response: {e}. Retrying in {sleep_time} seconds.")
                await asyncio.sleep(sleep_time)
            else:
                logger.error(f"Error in generate_chat_response: {e}. All retries exhausted.")
    if last_exception:
        raise last_exception


# --- CRITICAL FUNCTION: generate_chat_response_with_node_types ---
async def generate_chat_response_with_node_types(messages, role, task, temperature=0.75, retries=3, backoff_factor=2, logger=None):
    if logger is None:
        logger = current_app.logger

    last_exception = None
    for retry_attempt in range(retries):
        try:
            node_types = get_valid_node_types()
            node_types_str = ', '.join(node_types)

            # Modify messages to include system instruction as a user message
            system_message = {
                "role": "user",
                "content": "You are a helpful assistant. Please respond with information in JSON format. Valid Node Types: " + node_types_str + " **The response should be valid JSON.**"
            }
            messages_with_system = [system_message] + messages  # Prepend system message


            generation_config = types.GenerateContentConfig(
                temperature=temperature,
                top_p=0.95,
                top_k=40,
                max_output_tokens=2048,
                safety_settings=[],
            )
            # NOTE: generate_chat_response already extracts the JSON
            response_content = await generate_chat_response(messages_with_system, role, task, temperature=temperature, retries=retries, backoff_factor=backoff_factor, logger=logger, generation_config=generation_config)
            return response_content  # Return the extracted JSON string
        except Exception as e:
            last_exception = e
            if retry_attempt < retries - 1:
                sleep_time = backoff_factor ** (retry_attempt + 1)
                logger.warning(f"Error in generate_chat_response: {e}. Retrying in {sleep_time} seconds.")
                await asyncio.sleep(sleep_time)
            else:
                logger.error(f"Error in generate_chat_response: {e}. All retries exhausted.")
    if last_exception:
        raise last_exception

async def get_grounded_data(query, ce_type):
    """
    Retrieves grounded data from Google Search for a given query and CE type.
    """
    try:
        model = "gemini-2.0-flash"

        contents = [
            types.Content(
                role="user",
                parts=[types.Part.from_text(text=query)],
            ),
            types.Content(
                role="model",
                parts = [types.Part.from_text(text="Okay, I will search for that.")]
            ),
              types.Content(
                role="user",
                parts = [types.Part.from_text(text=(
                    "You are a helpful assistant that extracts information from Google Search results. "
                    f"You are assisting with a Conditional Element of type: {ce_type}.  "
                    "Return a JSON object with the following structure: \n"
                    "{\n"
                    " 'results': [\n"
                    " {\n"
                    " 'title': 'Title of the search result',\n"
                    " 'url': 'URL of the search result',\n"
                    " 'snippet': 'Snippet from the search result',\n"
                    " 'extracted_data': { ... }  // Data mapped to CE fields\n"
                    " }\n"
                    " ],\n"
                    " 'summary': 'A brief summary of the findings',\n"
                     " 'attribution': 'Data retrieved via Google Search using Gemini API.'\n"
                    "}\n"
                    "The 'extracted_data' field should map relevant information from the snippet to the "
                    f"fields defined for the CE type '{ce_type}'.  If a field cannot be filled from the snippet, "
                    "leave it as null or an empty string.  **The response should be valid JSON.**"

                ))]
            )
        ]

        tools = [types.Tool(google_search=types.GoogleSearch())]

        generation_config = types.GenerateContentConfig(
            temperature=0.4,
            top_p=0.95,
            top_k=40,
            max_output_tokens=2048,
            tools=tools,
        )
        response = await gemini_client.aio.models.generate_content(
          model=model,
          contents=contents,
          config=generation_config,
        )

        if response and response.text:
            # Extract JSON (Robust Extraction)
            match = re.search(r"```(?:json)?\n([\s\S]*?)```", response.text, re.IGNORECASE)
            if match:
                response_content = match.group(1).strip()
                current_app.logger.debug(f"Gemini API response (extracted): {response_content}")
            else:
                response_content = response.text
                current_app.logger.warning(f"No JSON block found in Gemini response. Using raw response text. Raw Response: {response.text}")
        else:
            response_content = None
            current_app.logger.warning(f"Gemini API response or response text is None. Full response object: {response}")

        if response_content:
          try:
            grounded_data = json.loads(response_content)
          except json.JSONDecodeError as e:
            current_app.logger.error(f"JSONDecode Error: {e}")
            return None
        else:
            return None

        return grounded_data

    except Exception as e:
        current_app.logger.error(f"Error in get_grounded_data: {e}", exc_info=True)
        return None

async def generate_image(prompt):
    from utilities import sanitize_filename
    from flask import current_app

    try:
        contents = prompt

        generate_content_config = types.GenerateContentConfig(
            temperature=1.0,
            top_p=0.95,
            top_k=40,
            max_output_tokens=8192,
            response_modalities=["image", "text"],
            response_mime_type="text/plain"
        )

        current_app.logger.debug(f"generate_image (Gemini) - Sending prompt to API: '{prompt}'")

        response = await gemini_client.aio.models.generate_content(
            model=gemini_image_model_name,
            contents=contents,
            config=generate_content_config
        )

        image_part = None
        for candidate in response.candidates:
             for part in candidate.content.parts:
                if part.inline_data is not None and part.inline_data.mime_type.startswith('image/'):
                    image_part = part
                    break
             if image_part:
                 break

        if not image_part:
            raise ValueError("No image data found in Gemini response")

        image_bytes = image_part.inline_data.data
        image = Image.open(BytesIO(image_bytes))


        unique_filename = f"generated_image_gemini_{uuid.uuid4().hex}.png"
        unique_filename = sanitize_filename(unique_filename)
        static_folder = current_app.static_folder
        image_folder = os.path.join(static_folder, 'images')
        os.makedirs(image_folder, exist_ok=True)
        image_file_path = os.path.join(image_folder, unique_filename)
        image.save(image_file_path)

        web_path = os.path.join('images', unique_filename).replace("\\", "/")
        return web_path

    except Exception as e:
        current_app.logger.error(f"Error in generate_image (Gemini - Refactored Config): {e}", exc_info=True)
        raise

üü® utilities.py:
# utilities.py (Complete, Refactored - Version for SSPEC PossPath)
import io
import os
import re
import html
import json
import time # Keep if any time-related utilities are planned
import uuid
import logging
import warnings # Keep if warnings module is used explicitly
from uuid import uuid4, UUID # Ensure UUID is imported
from PIL import Image # Keep for image processing if any (not directly used here now)
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from ce_nodes import get_valid_node_types # NODES definition is in ce_nodes.py
from flask import current_app, flash, render_template, url_for # Added url_for
import asyncio
import aiohttp # Keep if direct aiohttp calls are made (not in current scope)
# requests import was likely for old DALL-E, can be removed if not used elsewhere
# from google.generativeai import types # Used in ai_service.py, not directly here
from ai_service import generate_image # Import for Gemini image generation

load_dotenv()

# --- COS Analysis (Utility version - consider centralizing with speculate.analyze_cos) ---
async def analyze_cos(cos_content: str, cos_id: str = None) -> dict:
    """
    Analyzes COS content using AI to identify CEs.
    This version is kept in utilities.py as it might be called by routes.py.
    Returns: {'content_with_ce': <html_string_with_pills>, 'ces': [<ce_data_dict>, ...]}
    """
    from ai_service import generate_chat_response_with_node_types # Local import
    from ce_templates import replace_ce_tags_with_pills # Local import

    current_app.logger.debug(f"utilities.analyze_cos called for cos_id: {cos_id} with content: '{cos_content[:100]}...'")

    # AI Prompt to get text with <ce> tags AND a list of identified CEs
    prompt = (
        f"Analyze the following Condition of Satisfaction (COS) text: '{cos_content}'. "
        "Identify all Conditional Elements (CEs) within this text. "
        "A CE is a specific part of the COS that requires further detail or action. "
        f"For each CE found, determine its most appropriate 'NodeType' from this list ONLY: {', '.join(get_valid_node_types())}. "
        "Your response MUST be a valid JSON object with two keys: "
        "'analyzed_cos_text': This should be the original COS text but with each identified CE " # AI embeds tags
        "wrapped in <ce type='NodeType'>Your CE Text Here</ce> tags. "
        "And 'identified_ces': an array of objects, where each object represents a CE and has 'text' and 'type' keys. "
        "Example JSON: "
        '{'
        '  "analyzed_cos_text": "The <ce type=\'Research\'>literature review</ce> must be completed and <ce type=\'Stakeholder\'>key experts</ce> identified.",'
        '  "identified_ces": ['
        '    {"text": "literature review", "type": "Research"},'
        '    {"text": "key experts", "type": "Stakeholder"}'
        '  ]'
        '}'
    )

    messages = [
        {"role": "system", "content": "You are an expert in analyzing text to identify conditional elements and structure them in JSON. Ensure NodeTypes are from the provided list. The 'analyzed_cos_text' MUST include the <ce> tags."},
        {"role": "user", "content": prompt},
    ]
    response_text = ""
    try:
        response_text = await generate_chat_response_with_node_types(messages, role='COS Analysis', task='Analyze COS for CEs in Utilities')
        response_json = json.loads(response_text)

        ai_analyzed_text_with_tags = response_json.get("analyzed_cos_text", cos_content)
        # This list is for reference or if replace_ce_tags_with_pills needs it for metadata.
        # The pills themselves are generated from the tags in ai_analyzed_text_with_tags.
        ai_identified_ces_list = response_json.get("identified_ces", [])

        # `replace_ce_tags_with_pills` converts <ce> tags in `ai_analyzed_text_with_tags` to HTML pills
        # and generates unique data-ce-id for each.
        # The second argument (list of CEs) can be used for metadata like counts.
        ces_metadata_for_pills = []
        for item in ai_identified_ces_list:
            if item.get("type") in get_valid_node_types():
                ces_metadata_for_pills.append({
                    'content': item.get("text", ""),
                    'node_type': item.get("type")
                    # 'id' will be generated by replace_ce_tags_with_pills
                })
        
        content_with_pills_html = replace_ce_tags_with_pills(ai_analyzed_text_with_tags, ces_metadata_for_pills)
        
        # Extract structured CE data from the generated pills for the return value
        # This is what `routes.py`'s `/analyze_cos/<uuid:cos_id>` expects.
        final_ces_structure = []
        soup = BeautifulSoup(content_with_pills_html, 'html.parser')
        for pill_tag in soup.find_all('span', class_='ce-pill'):
            final_ces_structure.append({
                'id': pill_tag.get('data-ce-id'),
                'content': pill_tag.string.strip() if pill_tag.string else "",
                'node_type': pill_tag.get('data-ce-type'),
                'cos_id': cos_id # Link back if cos_id was provided
            })
            
        return {'content_with_ce': content_with_pills_html, 'ces': final_ces_structure}

    except json.JSONDecodeError as e:
        current_app.logger.error(f"JSONDecodeError in utilities.analyze_cos for cos_id {cos_id}. AI Response: '{response_text}'", exc_info=True)
        return {'content_with_ce': html.escape(cos_content), 'ces': []} # Fallback
    except Exception as e:
        current_app.logger.error(f"Exception in utilities.analyze_cos for cos_id {cos_id}: {e}", exc_info=True)
        return {'content_with_ce': html.escape(cos_content), 'ces': []}


# --- Outcome Data Generation ---
async def generate_outcome_data(USE_DATABASE: bool, request, method: str, selected_goal: str = None, domain: str = None, domain_icon: str = None, selected_goal_title: str = None):
    from ai_service import generate_chat_response # Local import
    from models import get_engine_and_session, SSOL # Local import
    from store import ssol_store # Local import
    from speculate import parse_ai_response_and_generate_html, create_ssol # Local import

    outcome_data = {
        'user_input': '',
        'selected_goal': selected_goal, # Detailed goal text
        'domain_icon': domain_icon,
        'domain': domain,
        'ssol_id': None, # Will be populated
        'ssol_summary': "Summary generation is pending or encountered an issue.",
        'ssol_title': selected_goal_title, # Catchy title
        'phases': {},
        'generated_image_path': url_for('static', filename='images/SSPEC_Logo_Motion.gif') # Default placeholder
    }

    user_input_from_form = request.form.get('user_text', '').strip() if method == 'POST' else request.args.get('user_text', '').strip()
    outcome_data['user_input'] = html.escape(user_input_from_form)

    # 1. Create SSOL Record and get its ID
    try:
        new_ssol_id_str = create_ssol(USE_DATABASE, title=selected_goal_title, description=selected_goal)
        outcome_data['ssol_id'] = new_ssol_id_str
        ssol_id_uuid_for_cos = UUID(new_ssol_id_str)
    except Exception as e:
        current_app.logger.error(f"Failed to create SSOL for title '{selected_goal_title}': {e}", exc_info=True)
        raise ValueError(f"SSOL creation failed: {str(e)}") from e

    current_app.logger.info(f"SSOL created with ID: {new_ssol_id_str}. Generating outcome data for goal: '{selected_goal_title}'")

    # Sanitize display inputs
    selected_goal_display = html.escape(selected_goal) if selected_goal else ""
    domain_display = html.escape(domain) if domain else ""

    # 2. Generate Summary for the SSOL
    summary_prompt = (
        f"Generate a **detailed but concise summary** for the Structured Solution project: '{selected_goal_title}' (Full goal: '{selected_goal_display}'). "
        f"This summary MUST provide a **comprehensive overview** and **use basic HTML markup for formatting** (`<p>`, `<ol>`, `<li>`, `<b>`, `<strong>`, `<i>`, `<em>`).\n"
        f"Return a JSON object with a SINGLE KEY 'summary', containing the summary text **with HTML markup**. "
    )
    summary_messages = [{"role": "user", "content": summary_prompt}]
    try:
        current_app.logger.info(f"Generating summary for SSOL ID: {new_ssol_id_str}...")
        summary_response_text = await generate_chat_response(summary_messages, role='Outcome Summary', task='Generate SSOL Summary')
        summary_data = json.loads(summary_response_text)
        generated_summary_html = summary_data.get('summary', "Summary not available.")
        outcome_data['ssol_summary'] = generated_summary_html
        
        # Update the SSOL record with the generated summary
        if USE_DATABASE:
            with current_app.app_context():
                engine, SessionLocal = get_engine_and_session()
                session = SessionLocal()
                try:
                    ssol_to_update = session.query(SSOL).get(ssol_id_uuid_for_cos)
                    if ssol_to_update:
                        ssol_to_update.description = generated_summary_html
                        session.commit()
                except Exception as db_exc:
                    session.rollback()
                    current_app.logger.error(f"DB error updating SSOL summary: {db_exc}", exc_info=True)
                finally:
                    session.close()
        else: # In-memory
            if new_ssol_id_str in ssol_store:
                ssol_store[new_ssol_id_str]['description'] = generated_summary_html
    except Exception as e:
        current_app.logger.error(f"Error generating/updating summary (SSOL {new_ssol_id_str}): {e}", exc_info=True)


    # 3. Generate Structured Solution (Phases, COS, and initial CEs) with RETRY LOGIC
    structured_solution_prompt = (
        f"You are an expert in structured problem-solving (SSPEC PossPath). Generate a concise Structured Solution for: '{selected_goal_title}' (Full goal: '{html.escape(selected_goal)}').\n"
        f"Organize into phases: Discovery, Engagement, Action, Completion, Legacy.\n"
        f"For EACH phase, generate 1-3 Conditions of Satisfaction (COS).\n"
        f"Within each COS sentence, embed 'Conditional Elements' (CEs) by wrapping them in `<ce type='NodeType'>CE Text</ce>` tags. "
        f"Valid 'NodeType' values: {', '.join(get_valid_node_types())}. Choose the most contextually appropriate NodeType.\n"
        f"Output a JSON object. Keys are phase names (e.g., \"Discovery\"). Values are arrays of COS objects.\n"
        f"Each COS object MUST have ONE key: 'content', with the full COS text including `<ce>` tags.\n"
        f"Example: {{ \"Discovery\": [{{\"content\": \"Identify <ce type='Stakeholder'>key groups</ce>.\"}}] }}\n"
        f"Ensure valid JSON. Do NOT include 'id' or 'status' for COS objects in this JSON output."
    )
    structured_solution_messages = [{"role": "user", "content": structured_solution_prompt}]
    
    max_retries = 3
    retry_delay_seconds = 2
    structured_solution_json_from_ai = None

    for attempt in range(max_retries):
        structured_solution_response_text = ""
        try:
            current_app.logger.info(f"Generating structured solution (Attempt {attempt + 1}/{max_retries}) for SSOL ID: {new_ssol_id_str}...")
            structured_solution_response_text = await generate_chat_response(
                structured_solution_messages, 
                role='Structured Solution', 
                task='Generate Phases and COS with CEs'
            )
            
            # --- FIX: Robustly extract JSON from potential markdown blocks ---
            json_text = structured_solution_response_text
            match = re.search(r"```(?:json)?\s*([\s\S]*?)\s*```", structured_solution_response_text)
            if match:
                json_text = match.group(1).strip()
            else: # If no markdown, find the main JSON object
                start = structured_solution_response_text.find('{')
                end = structured_solution_response_text.rfind('}')
                if start != -1 and end != -1 and end > start:
                    json_text = structured_solution_response_text[start:end+1]

            structured_solution_json_from_ai = json.loads(json_text)
            current_app.logger.info(f"Successfully parsed structured solution on attempt {attempt + 1}.")
            break 
            
        except json.JSONDecodeError as e:
            current_app.logger.error(f"JSON decoding error for structured solution (Attempt {attempt + 1}). AI Response: {structured_solution_response_text}", exc_info=True)
            if attempt < max_retries - 1:
                await asyncio.sleep(retry_delay_seconds)
            else:
                current_app.logger.error("All retries failed for generating structured solution.")
                outcome_data['phases'] = {}
                
        except Exception as e:
            current_app.logger.error(f"General error generating structured solution (Attempt {attempt + 1}): {e}", exc_info=True)
            if attempt < max_retries - 1:
                await asyncio.sleep(retry_delay_seconds)
            else:
                 current_app.logger.error("All retries failed for generating structured solution.")
                 outcome_data['phases'] = {}

    if isinstance(structured_solution_json_from_ai, dict):
        outcome_data['phases'] = parse_ai_response_and_generate_html(
            USE_DATABASE,
            structured_solution_json_from_ai,
            ssol_id_uuid_for_cos
        )
        current_app.logger.info(f"Structured solution (COS/CEs) processed and saved for SSOL ID: {new_ssol_id_str}.")
    else:
        current_app.logger.error(f"Failed to generate structured solution after all retries. Final response was not a valid dictionary.")
        outcome_data['phases'] = {}

    current_app.logger.info(f"Outcome data generation process complete for SSOL ID: {new_ssol_id_str}.")
    return outcome_data


# --- User Input Analysis ---
async def analyze_user_input(text: str) -> list:
    from ai_service import generate_chat_response # Local import
    messages = [
        {"role": "system", "content": "You are an AI that analyzes user inputs and extracts relevant keywords. Respond with a JSON array of strings. Example: [\"keyword1\", \"keyword2\"]"},
        {"role": "user", "content": f"Extract keywords from: '{text}'"},
    ]
    response_text = ""
    try:
        response_text = await generate_chat_response(messages, role='Keyword Extraction', task='Extract Keywords', temperature=0.5)
        keywords = json.loads(response_text)
        if not isinstance(keywords, list):
            keywords = [str(kw).strip() for kw in response_text.split(',') if kw.strip()] # Fallback
        return keywords
    except Exception as e:
        current_app.logger.error(f"Error in analyze_user_input: {e}", exc_info=True)
        return [text] # Fallback


async def generate_sentiment_analysis(text: str, temperature: float = 0.7) -> str:
    from ai_service import generate_chat_response # Local import
    messages = [
        {"role": "user", "content": f"What is the primary sentiment expressed in the following text: '{text}'? Respond with a single word: POSITIVE, NEGATIVE, or NEUTRAL, in a JSON object like {{ \"sentiment\": \"SENTIMENT_WORD\" }}."},
    ]
    response_text = ""
    sentiment = "NEUTRAL" # Default
    try:
        response_text = await generate_chat_response(messages, role='Sentiment Analysis', task='Analyze Sentiment', temperature=temperature)
        response_json = json.loads(response_text)
        sentiment_from_ai = response_json.get("sentiment", "NEUTRAL").upper()
        if sentiment_from_ai in ["POSITIVE", "NEGATIVE", "NEUTRAL"]:
            sentiment = sentiment_from_ai
        else:
            sentiment = "NEUTRAL"
    except Exception as e:
        current_app.logger.error(f"Error in generate_sentiment_analysis: {e}. Response: {response_text}", exc_info=True)
        sentiment = "NEUTRAL" # Fallback
    return sentiment


# --- Goal Generation ---
async def generate_goal(user_input: str) -> list:
    from ai_service import generate_chat_response # Local import

    system_message_content = (
        "You are an AI that generates three innovative and *distinct* goal outcomes based on user input. "
        "For EACH goal, you MUST provide: "
        "1. 'title': A short, enlivening title (3-7 words), catchy and enrolling. "
        "2. 'goal': A more detailed goal description (1-3 sentences). "
        "3. 'domain': A relevant general category (e.g., 'Technology', 'Health', 'Art', NOT a URL). "
        "4. 'icon': A corresponding FontAwesome 6 Solid (fas) icon class (e.g., 'fas fa-rocket'). "
        "Return a valid JSON array of exactly three objects. Each object MUST have 'title', 'goal', 'domain', and 'icon' keys. "
    )

    async def generate_single_set(temp: float):
        messages = [{"role": "user", "content": system_message_content + f"\n\nUser input: '{user_input}'"}]
        try:
            response_text = await generate_chat_response(messages, role='Goal Generation', task='Generate Goal Options', temperature=temp)
            goal_options = json.loads(response_text)
            if isinstance(goal_options, list) and all(isinstance(g, dict) and all(k in g for k in ['title', 'goal', 'domain', 'icon']) for g in goal_options) and len(goal_options) > 0:
                return goal_options[:3]
            return []
        except Exception as e:
            logging.error(f"Error in generate_single_set (temp {temp}): {e}", exc_info=True)
            return []

    all_goals = await generate_single_set(temp=0.75)
    if not all_goals or len(all_goals) < 3:
        more_goals = await generate_single_set(temp=0.6)
        seen_titles = {g['title'] for g in all_goals}
        for g in more_goals:
            if g['title'] not in seen_titles:
                all_goals.append(g)
                if len(all_goals) >= 3: break
    
    if not all_goals:
        return [{'title': f"Define: {user_input[:30].strip()}", 'goal': f"Clearly define and scope the possibility related to '{user_input}'.", 'domain': "General", 'icon': "fas fa-lightbulb"}]
    return all_goals[:3]


# --- Filename Sanitization ---
def sanitize_filename(filename: str) -> str:
    if not filename: return ""
    filename = re.sub(r'[<>:"/\\|?*\x00-\x1F]', '', filename)
    filename = re.sub(r'[\s]+', '_', filename)
    return filename[:100] # Keep filename length reasonable


# --- SSOL Image Generation & Naming ---
async def generate_ssol_image(prompt: str, ssol_id=None):
    """
    Generates an image using ai_service.generate_image and attempts to rename it
    based on ssol_id for better organization. Returns the web path to the image.
    """
    try:
        # ai_generate_image from ai_service now handles its own errors and returns a default path
        temp_web_path = await generate_image(prompt)

        # If it returned the default, no need to rename
        if 'sspec_default.png' in temp_web_path:
            current_app.logger.info(f"SSOL Image generation resulted in default image.")
            return temp_web_path

        if ssol_id:
            original_filename = os.path.basename(temp_web_path)
            # Path needs to be constructed relative to static folder
            original_fs_path = os.path.join(current_app.static_folder, *temp_web_path.split('/'))

            safe_ssol_id_part = sanitize_filename(str(ssol_id))
            _, extension = os.path.splitext(original_filename)
            if not extension: extension = '.png'

            new_image_filename = f"ssol_image_{safe_ssol_id_part}{extension}"
            new_fs_path = os.path.join(current_app.static_folder, 'images', new_image_filename)
            
            try:
                if os.path.exists(original_fs_path):
                    os.makedirs(os.path.dirname(new_fs_path), exist_ok=True)
                    if os.path.exists(new_fs_path) and original_fs_path != new_fs_path:
                        os.remove(new_fs_path)
                    os.rename(original_fs_path, new_fs_path)
                    final_web_path = url_for('static', filename=f'images/{new_image_filename}')
                    current_app.logger.info(f"SSOL Image renamed to: {new_image_filename}")
                    return final_web_path
                else:
                    current_app.logger.warning(f"Original generated image {original_fs_path} not found for renaming.")
                    return temp_web_path
            except OSError as e:
                current_app.logger.error(f"Error renaming SSOL image: {e}", exc_info=True)
                return temp_web_path
        else:
            return temp_web_path

    except Exception as e:
        current_app.logger.error(f"Error in generate_ssol_image utility: {e}", exc_info=True)
        return url_for('static', filename='images/sspec_default.png') # Fallback


# --- SSOL ID Generation (Consider for deprecation if create_ssol is primary) ---
def generate_ssol_id(USE_DATABASE: bool, selected_goal_title: str) -> str:
    """
    Finds an existing SSOL by title or creates a new one (minimal) and returns its ID.
    NOTE: This might be redundant if speculate.create_ssol is the primary way to create SSOLs.
    """
    from models import SSOL, get_engine_and_session
    from store import ssol_store
    from app import app

    if USE_DATABASE:
        with app.app_context():
            engine, SessionLocal = get_engine_and_session()
            session = SessionLocal()
            try:
                ssol_instance = session.query(SSOL).filter_by(title=selected_goal_title).first()
                if not ssol_instance:
                    new_id = uuid.uuid4()
                    ssol_instance = SSOL(id=new_id, title=selected_goal_title, description="Initial placeholder.")
                    session.add(ssol_instance)
                    session.commit()
                    return str(new_id)
                return str(ssol_instance.id)
            except Exception as e:
                session.rollback()
                raise
            finally:
                session.close()
    else: # In-memory
        for s_id, s_data in ssol_store.items():
            if s_data.get('title') == selected_goal_title:
                return s_id
        new_id_str = str(uuid.uuid4())
        ssol_store[new_id_str] = {'id': new_id_str, 'title': selected_goal_title, 'description': "Initial placeholder.", 'phases': {}}
        return new_id_str


# --- Badge Class for Status ---
def get_badge_class_from_status(status: str) -> str:
   return {
       'Proposed': 'bg-info',
       'In Progress': 'bg-warning text-dark',
       'Completed': 'bg-success',
       'Rejected': 'bg-danger'
   }.get(status, 'bg-secondary')

üü© goal_selection.html:
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
  <h1>What is your Commitment?</h1>
  <table class="table table-bordered">
    <thead>
      <tr>
        <th>Your Input</th>
        <th class="text-end">Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="user-input"> <!-- This td itself is not ideal for direct text content if edit/save target specific children -->
          <span class="user-input-display">{{ user_input }}</span>
          <input type="text" class="form-control form-control-sm user-input-edit d-none" value="{{ user_input }}">
        </td>
        <td class="text-end">
          <button type="button" class="btn btn-primary btn-sm edit-user-input">Edit</button>
          <button type="button" class="btn btn-success btn-sm save-user-input d-none">Update</button>
          <button type="button" class="btn btn-danger btn-sm cancel-user-input d-none">Cancel</button>
        </td>
      </tr>
    </tbody>
  </table>
  <p>
    Based on your input, we have speculated three high-level outcomes.
    Please choose the one that is closest to your desired result, or click the "Speculate New Outcomes" button to
    generate a new set of possibilities.
  </p>
  <div class="row card-container">
    {% for goal in goals %}
      <div class="col-md-4 mb-4">
        <div class="card retro-futuristic-card text-center">
          <div class="card-body card-content">
            <div class="card-upper-content">
                <i class="{{ goal.icon }} fa-2x mb-3"></i>
                <p class="domain domain-text">{{ goal.domain | title }}</p>
                <div class="goal-description goal-text">
                    {{ goal.goal | replace('\n', '<br>') | safe }}
                </div>
            </div>
            <form action="/outcome" method="post" class="goal-selection-form">
              <input type="hidden" name="selected_goal" value="{{ goal.goal }}">
              <input type="hidden" name="domain" value="{{ goal.domain }}">
              <input type="hidden" name="domain_icon" value="{{ goal.icon }}">
              <input type="hidden" name="selected_goal_title" value="{{ goal.title }}">
              <button type="submit" class="btn btn-primary">Select</button>
            </form>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
  <div class="text-center">
    <button type="button" class="btn btn-outline-primary" id="generate-new-goals">
      <span class="refresh-icon"><i class="fas fa-sync-alt"></i></span> Speculate New Outcomes</button>
  </div>
</div>
{% endblock %}

{% block scripts %}
<!-- Removed the large inline script block -->
<!-- All JavaScript logic will now be driven by goal_selection.js and base_functions.js -->
<script type="module" src="{{ url_for('static', filename='js/goal_selection.js') }}"></script>
{% endblock %}

üü¶ outcome.html:
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <!-- Title Row (Spanning Full Width) -->
    <div class="row">
        <div class="col text-center">
            <h1 class="ssol-title">{{ ssol.ssol_title | safe }}</h1>
        </div>
    </div>

    <!-- Image and Domain Row -->
    <div class="row outcome-header">
        <div class="col-md-4 text-center">
            <!-- Image Wrapper (for stacking) -->
            <div class="image-wrapper">
                <img src="{{ url_for('static', filename='images/SSPEC_Logo_Motion.gif') }}" alt="Loading Structure..." class="rounded mb-3 placeholder-image" id="placeholderImage">
                <img src="" alt="Structured Solution Visualization" class="rounded mb-3 generated-image" id="ssolImage"> {# src will be set by JS #}
            </div>
            <!-- Container for error/status messages -->
            <div id="image-status-container" class="mt-2 small"></div>

            <h2>Domain</h2>
            <i class="{{ ssol.domain_icon }} fa-3x mb-3"></i>
            <p class="domain domain-text text-center">{{ ssol.domain | title }}</p>
            <h2>Fulfilled Goal</h2>
            <p><strong>{{ ssol.selected_goal | safe }}</strong></p>
            <div id="ssol-goal" style="display: none;">{{ ssol.selected_goal | safe }}</div>
            <div class="text-center mt-4">
                <button id="save-as-pdf-button" data-ssol-id="{{ ssol_id }}" class="btn btn-info" title="Save as PDF">
                    <i class="fas fa-download me-2"></i>PDF
                </button>
            </div>
        </div>

        <!-- Summary Column -->
        <div class="col-md-8">
            <h1>Preliminary Structured Solution</h1>
            <p id="ssol-summary">{{ ssol.ssol_summary | safe }}</p>
        </div>
    </div>

    <!-- Phases & Conditions of Satisfaction Row (Table structure remains the same) -->
    <div class="row">
        <h1>Phases & Conditions of Satisfaction</h1>
        <div class="col">
            <div class="accordion mt-4" id="phase-accordion">
                {% for phase_name, cos_list in ssol.phases.items() %}
                <div class="accordion-item">
                    <h2 class="accordion-header phase-colors" id="heading-{{ phase_name | replace(' ', '_') }}">
                        <button
                            class="accordion-button"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#collapse-{{ phase_name | replace(' ', '_') }}"
                            aria-expanded="true" 
                            aria-controls="collapse-{{ phase_name | replace(' ', '_') }}"
                            style="background-color: var(--phase-{{ loop.index0 }});">
                            {{ phase_name | title }} PHASE
                        </button>
                    </h2>
                    <div
                        id="collapse-{{ phase_name | replace(' ', '_') }}"
                        class="accordion-collapse collapse show" 
                        aria-labelledby="heading-{{ phase_name | replace(' ', '_') }}"
                        data-bs-parent="#phase-accordion">
                        <div class="accordion-body phase-table-container" data-ssol-id="{{ ssol_id }}" style="border: 2px solid var(--phase-{{ loop.index0 }});">
                            {% if cos_list %}
                            <table class="table table-striped table-hover phase-table" id="{{ phase_name | replace(' ', '_') }}-table">
                                <thead>
                                    <tr>
                                        <th scope="col" style="width: 10%;">Status</th>
                                        <th scope="col" style="width: 40%;">Condition of Satisfaction</th>
                                        <th scope="col" style="width: 15%;">Accountable Party</th>
                                        <th scope="col" style="width: 15%;">Completion Date</th>
                                        <th scope="col" class="text-end actions-header" style="width: 20%;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for cos in cos_list %}
                                    <tr class="cos-row" data-cos-id="{{ cos.id }}" data-editing="false">
                                        <td class="status-cell align-middle">
                                            <span class="status-pill {{ cos.status | get_badge_class_from_status }}">{{ cos.status | upper }}</span>
                                        </td>
                                        <td class="cos-content-cell align-middle">
                                            <div class="cos-content-display">{{ cos.content | safe }}</div>
                                            <div class="cos-content-edit d-none">
                                                <textarea class="form-control form-control-sm cos-content-textarea" rows="3">{{ cos.content | striptags }}</textarea>
                                            </div>
                                        </td>
                                        <td class="cos-accountable-party-cell align-middle">
                                            <span class="cos-accountable-party-display">{{ cos.accountable_party or 'N/A' }}</span>
                                            <input type="text" class="form-control form-control-sm cos-accountable-party-edit d-none" value="{{ cos.accountable_party }}">
                                        </td>
                                        <td class="cos-completion-date-cell align-middle">
                                            <span class="cos-completion-date-display">{{ cos.completion_date or 'N/A' }}</span>
                                            <input type="date" class="form-control form-control-sm cos-completion-date-edit d-none" value="{{ cos.completion_date if cos.completion_date else '' }}">
                                        </td>
                                        <td class="text-end actions-cell align-middle">
                                            <div class="btn-group cos-actions" role="group">
                                                <button class="btn btn-sm btn-primary edit-cos-button" title="Edit COS"><i class="fas fa-edit"></i></button>
                                                <button class="btn btn-sm btn-success update-cos-button d-none" title="Update COS"><i class="fas fa-check"></i></button>
                                                <button class="btn btn-sm btn-secondary cancel-cos-button d-none" title="Cancel Edit"><i class="fas fa-times"></i></button>
                                                <button class="btn btn-sm btn-danger delete-cos-button" title="Delete COS"><i class="fas fa-trash"></i></button>
                                                <button class="btn btn-sm btn-info analyze-cos-button" data-cos-id="{{ cos.id }}" title="Analyze COS"><i class="fas fa-search-plus"></i></button>
                                            </div>
                                        </td>
                                    </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                            <button class="btn btn-success btn-sm add-cos mt-2" data-phase="{{ phase_name | replace(' ', '_') }}">
                                <i class="fas fa-plus"></i> Add Condition of Satisfaction
                            </button>
                            {% else %}
                            <p>No Conditions of Satisfaction found for this phase.</p>
                            <button class="btn btn-success btn-sm add-cos mt-2" data-phase="{{ phase_name | replace(' ', '_') }}">
                                <i class="fas fa-plus"></i> Add Condition of Satisfaction
                            </button>
                            {% endif %}
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- Error Modal -->
    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">Error</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">{{ error_message }}</div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Placeholder for dynamic modals -->
    <div id="dynamicModalContainer"></div>
</div>
{% endblock %}

{% block scripts %}
<script type="module" src="{{ url_for('static', filename='js/cos_table.js') }}"></script>
<script type="module" src="{{ url_for('static', filename='js/ce_cards.js') }}"></script>

<link href="https://unpkg.com/tabulator-tables@4.9.3/dist/css/tabulator.min.css" rel="stylesheet">
<script src="https://unpkg.com/tabulator-tables@4.9.3/dist/js/tabulator.min.js"></script>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const ssolId = "{{ ssol_id }}"; // From Flask template
    const ssolImageElement = document.getElementById('ssolImage'); 
    const placeholderImageElement = document.getElementById('placeholderImage');
    const imageStatusContainer = document.getElementById('image-status-container'); // Renamed for clarity

    const defaultStaticImagePath = "{{ url_for('static', filename='images/sspec_default.png') }}";
    const loadingGifPath = "{{ url_for('static', filename='images/SSPEC_Logo_Motion.gif') }}";

    if (ssolImageElement && placeholderImageElement) {
        // Initial state for fade effect
        ssolImageElement.src = ""; // Start with empty src for the final image
        ssolImageElement.style.opacity = '0';
        placeholderImageElement.src = loadingGifPath;
        placeholderImageElement.style.opacity = '1';
        if (imageStatusContainer) imageStatusContainer.innerHTML = ''; // Clear previous messages

        let attempts = 0;
        const maxAttempts = 7; // Increased attempts
        const retryDelay = 2500; // Slightly longer delay

        function fetchImageWithRetry() {
            attempts++;
            if (imageStatusContainer) { // Update status message
                imageStatusContainer.innerHTML = `<p class="text-info">Fetching image (attempt ${attempts}/${maxAttempts})...</p>`;
            }

            fetch(`/get_ssol_image/${ssolId}`)
              .then(response => {
                if (!response.ok) {
                  return response.json().then(err => {
                    throw new Error(err.error || err.message || `HTTP error! status: ${response.status}`);
                  }).catch(() => {
                    throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
                  });
                }
                return response.json();
              })
              .then(data => {
                console.log(`Image fetch attempt ${attempts}:`, data); 
                // Check if a valid, non-default, non-placeholder image path is found
                if (data.image_path && data.status === 'found' && 
                    data.image_path !== defaultStaticImagePath && 
                    data.image_path !== loadingGifPath &&
                    !data.image_path.includes('SSPEC_Logo_Motion.gif') && // Explicitly check against GIF name part
                    !data.image_path.includes('sspec_default.png')      // Explicitly check against default name part
                   ) {
                  ssolImageElement.src = data.image_path;
                  ssolImageElement.alt = "Structured Solution Visualization";
                  ssolImageElement.onload = () => {
                    placeholderImageElement.style.opacity = '0';
                    ssolImageElement.style.opacity = '1';
                    placeholderImageElement.classList.add('hidden');
                    ssolImageElement.classList.add('loaded');
                    if (imageStatusContainer) imageStatusContainer.innerHTML = ''; // Clear status on success
                  };
                  ssolImageElement.onerror = () => {
                    console.error('Error loading final SSOL image from path:', data.image_path);
                    displayDefaultImage("Could not load the retrieved image. Displaying default.");
                  };
                } else if (attempts < maxAttempts && (data.status === 'pending_or_not_found' || !data.image_path || data.image_path.includes('sspec_default.png'))) {
                  // If status is pending, or if the path returned is still a default path, retry
                  setTimeout(fetchImageWithRetry, retryDelay);
                } else { 
                  // Max attempts reached or a non-retryable issue (e.g., explicit error from server that's not 'pending')
                  displayDefaultImage(data.message || 'Image not available after retries. Displaying default.');
                }
              })
              .catch(error => {
                console.error(`Error fetching image data (attempt ${attempts}):`, error);
                if (attempts < maxAttempts) {
                  if (imageStatusContainer) imageStatusContainer.innerHTML = `<p class="text-danger">Error fetching image (attempt ${attempts}/${maxAttempts}). Retrying...</p>`;
                  setTimeout(fetchImageWithRetry, retryDelay);
                } else {
                  displayDefaultImage('Image loading failed after multiple attempts.');
                }
              });
        }

        function displayDefaultImage(message) {
            placeholderImageElement.style.opacity = '0'; // Hide placeholder
            ssolImageElement.src = defaultStaticImagePath;
            ssolImageElement.alt = "Default SSPEC Image";
            ssolImageElement.style.opacity = '1'; // Show default
            ssolImageElement.classList.add('loaded');
            if (imageStatusContainer) {
                imageStatusContainer.innerHTML = `<p class="text-warning small mt-1">${message}</p>`;
            }
        }

        fetchImageWithRetry(); // Initial call
    } else {
        console.warn("Required image elements (ssolImage or placeholderImage) not found.");
    }
  });
</script>

<script type="text/javascript">
    const NODES = {{ nodes | tojson }};
</script>
{% endblock %}

üü™ cos_table.js:
// cos_table.js (Refactored for Simplicity and Reliability)
import { displayCEModal } from './ce_cards.js';
import { showLoadingSpinner, hideLoadingSpinner } from './base_functions.js';

// --- Utility Functions (Unchanged) ---
function getBadgeClassFromStatus(status) {
    switch (status) {
        case 'Proposed': return 'bg-info';
        case 'In Progress': return 'bg-warning text-dark';
        case 'Completed': return 'bg-success';
        case 'Rejected': return 'bg-danger';
        default: return 'bg-secondary';
    }
}

function handleApiResponse(response) {
    if (!response.ok) {
        return response.json().then(errorData => {
            const message = errorData.error || errorData.message || JSON.stringify(errorData);
            throw new Error(`Server responded with ${response.status}: ${message}`);
        });
    }
    return response.json();
}

// --- DOM Manipulation & State (Largely Unchanged) ---
function storeOriginalValues(cosRow) {
    const statusPill = cosRow.querySelector('.status-cell .status-pill');
    const contentDisplay = cosRow.querySelector('.cos-content-cell .cos-content-display');
    const accountablePartyDisplay = cosRow.querySelector('.cos-accountable-party-cell .cos-accountable-party-display');
    const completionDateDisplay = cosRow.querySelector('.cos-completion-date-cell .cos-completion-date-display');
    cosRow.dataset.originalValues = JSON.stringify({
        status: statusPill ? statusPill.textContent.trim().toUpperCase() : 'PROPOSED',
        contentHTML: contentDisplay ? contentDisplay.innerHTML : '',
        accountableParty: accountablePartyDisplay ? accountablePartyDisplay.textContent.trim() : '',
        completionDate: completionDateDisplay ? completionDateDisplay.textContent.trim() : ''
    });
}

function revertToOriginalValues(cosRow) {
    if (!cosRow.dataset.originalValues) return;
    const original = JSON.parse(cosRow.dataset.originalValues);
    const statusCell = cosRow.querySelector('.status-cell');
    if (statusCell) {
        statusCell.innerHTML = `<span class="status-pill ${getBadgeClassFromStatus(original.status)}">${original.status}</span>`;
    }
    const contentDisplay = cosRow.querySelector('.cos-content-cell .cos-content-display');
    if (contentDisplay) contentDisplay.innerHTML = original.contentHTML;
    const accPartyDisplay = cosRow.querySelector('.cos-accountable-party-cell .cos-accountable-party-display');
    if (accPartyDisplay) accPartyDisplay.textContent = original.accountableParty;
    const compDateDisplay = cosRow.querySelector('.cos-completion-date-cell .cos-completion-date-display');
    if (compDateDisplay) compDateDisplay.textContent = original.completionDate;
    toggleEditModeUI(cosRow, false);
}

function updateRowDisplay(cosRow, cosData) {
    const statusCell = cosRow.querySelector('.status-cell');
    if (statusCell) {
        statusCell.innerHTML = `<span class="status-pill ${getBadgeClassFromStatus(cosData.status)}">${cosData.status.toUpperCase()}</span>`;
    }
    const contentDisplay = cosRow.querySelector('.cos-content-cell .cos-content-display');
    if (contentDisplay) contentDisplay.innerHTML = cosData.content;
    const accountablePartyDisplay = cosRow.querySelector('.cos-accountable-party-cell .cos-accountable-party-display');
    if (accountablePartyDisplay) accountablePartyDisplay.textContent = cosData.accountable_party || 'N/A';
    const completionDateDisplay = cosRow.querySelector('.cos-completion-date-cell .cos-completion-date-display');
    if (completionDateDisplay) completionDateDisplay.textContent = cosData.completion_date || 'N/A';
}

function toggleEditModeUI(cosRow, editing) {
    cosRow.dataset.editing = editing.toString();
    const elementsToToggle = [
        { display: '.cos-content-display', edit: '.cos-content-edit' },
        { display: '.cos-accountable-party-display', edit: '.cos-accountable-party-edit' },
        { display: '.cos-completion-date-display', edit: '.cos-completion-date-edit' }
    ];
    elementsToToggle.forEach(pair => {
        cosRow.querySelector(pair.display)?.classList.toggle('d-none', editing);
        cosRow.querySelector(pair.edit)?.classList.toggle('d-none', !editing);
    });

    const statusCell = cosRow.querySelector('.status-cell');
    const statusPill = statusCell.querySelector('.status-pill');
    const statusDropdown = statusCell.querySelector('select.status-edit-select');
    if (editing) {
        if (statusPill && !statusDropdown) {
            const currentStatus = statusPill.textContent.trim();
            statusPill.classList.add('d-none');
            statusCell.insertAdjacentHTML('beforeend', createStatusDropdown(currentStatus));
        }
    } else {
        statusDropdown?.remove();
        statusPill?.classList.remove('d-none');
    }

    cosRow.querySelector('.edit-cos-button')?.classList.toggle('d-none', editing);
    cosRow.querySelector('.update-cos-button')?.classList.toggle('d-none', !editing);
    cosRow.querySelector('.cancel-cos-button')?.classList.toggle('d-none', !editing);
    cosRow.querySelector('.delete-cos-button')?.classList.toggle('d-none', editing);
    cosRow.querySelector('.analyze-cos-button')?.classList.toggle('d-none', editing);
}

function stripHtmlForTextarea(htmlString) {
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlString;
    return tempDiv.textContent || tempDiv.innerText || "";
}

function createStatusDropdown(selectedStatus) {
    const statuses = ['Proposed', 'In Progress', 'Completed', 'Rejected'];
    const optionsHtml = statuses.map(status =>
        `<option value="${status}"${status.toUpperCase() === selectedStatus.toUpperCase() ? ' selected' : ''}>${status}</option>`
    ).join('');
    return `<select class="form-select form-select-sm status-edit-select">${optionsHtml}</select>`;
}


// --- Event Handlers ---

function handlePhaseTableBodyClick(event) {
    const target = event.target;
    
    const pill = target.closest('.ce-pill');
    if (pill) {
        event.preventDefault();
        handleCEPillClick(pill);
        return;
    }

    const button = target.closest('button');
    if (button) {
        const cosRow = button.closest('.cos-row');
        if (!cosRow) return;
        
        event.preventDefault();
        const cosId = cosRow.dataset.cosId;

        if (button.classList.contains('edit-cos-button')) {
            handleEditCOS(cosRow);
        } else if (button.classList.contains('update-cos-button')) {
            handleUpdateCOS(cosRow, cosId);
        } else if (button.classList.contains('cancel-cos-button')) {
            revertToOriginalValues(cosRow);
        } else if (button.classList.contains('delete-cos-button')) {
            handleDeleteCOS(cosRow, cosId);
        } else if (button.classList.contains('analyze-cos-button')) {
            handleAnalyzeCOS(button, cosRow, cosId);
        }
    }
}

function handleEditCOS(cosRow) {
    if (cosRow.dataset.editing === 'true') return;
    storeOriginalValues(cosRow);
    
    const contentDisplay = cosRow.querySelector('.cos-content-display');
    const contentTextarea = cosRow.querySelector('.cos-content-edit textarea');
    if (contentDisplay && contentTextarea) {
        contentTextarea.value = stripHtmlForTextarea(contentDisplay.innerHTML);
    }
    
    const accPartyDisplay = cosRow.querySelector('.cos-accountable-party-display');
    const accPartyEditInput = cosRow.querySelector('.cos-accountable-party-edit');
    if (accPartyDisplay && accPartyEditInput) {
        accPartyEditInput.value = accPartyDisplay.textContent.trim() === 'N/A' ? '' : accPartyDisplay.textContent.trim();
    }
    
    const compDateDisplay = cosRow.querySelector('.cos-completion-date-display');
    const compDateEditInput = cosRow.querySelector('.cos-completion-date-edit');
    if (compDateDisplay && compDateEditInput) {
        compDateEditInput.value = compDateDisplay.textContent.trim() === 'N/A' ? '' : compDateDisplay.textContent.trim();
    }

    toggleEditModeUI(cosRow, true);
}

function handleUpdateCOS(cosRow, cosId) {
    const newContent = cosRow.querySelector('.cos-content-edit textarea')?.value.trim() || '';
    const newStatus = cosRow.querySelector('.status-edit-select')?.value || 'Proposed';
    const newAccountableParty = cosRow.querySelector('.cos-accountable-party-edit')?.value.trim() || '';
    const newCompletionDate = cosRow.querySelector('.cos-completion-date-edit')?.value || '';
    const payload = { content: newContent, status: newStatus, accountable_party: newAccountableParty, completion_date: newCompletionDate };

    const updateButton = cosRow.querySelector('.update-cos-button');
    const originalButtonHtml = updateButton.innerHTML;
    updateButton.disabled = true;
    updateButton.innerHTML = `<i class="fas fa-spinner fa-spin"></i>`;

    fetch(`/update_cos/${cosId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' },
        body: JSON.stringify(payload)
    })
    .then(handleApiResponse)
    .then(data => {
        if (data.success && data.cos) {
            updateRowDisplay(cosRow, data.cos);
            toggleEditModeUI(cosRow, false);
        } else {
            throw new Error(data.error || 'Update failed to return COS data.');
        }
    })
    .catch(error => {
        console.error('Error updating COS:', error);
        alert(`Error: ${error.message}`);
    })
    .finally(() => {
        updateButton.disabled = false;
        updateButton.innerHTML = originalButtonHtml;
    });
}

function handleDeleteCOS(cosRow, cosId) {
    if (confirm('Are you sure you want to delete this Condition of Satisfaction?')) {
        fetch(`/delete_cos/${cosId}`, {
            method: 'DELETE',
            headers: { 'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }
        })
        .then(handleApiResponse)
        .then(data => {
            if (data.success) {
                cosRow.remove();
            } else {
                throw new Error(data.error || 'Deletion failed.');
            }
        })
        .catch(error => {
            console.error('Error deleting COS:', error);
            alert(`Error: ${error.message}`);
        });
    }
}

function handleAnalyzeCOS(analyzeButton, cosRow, cosId) {
    const originalButtonHtml = analyzeButton.innerHTML;
    analyzeButton.disabled = true;
    analyzeButton.innerHTML = `<i class="fas fa-spinner fa-spin"></i>`;

    fetch(`/analyze_cos/${cosId}`, { headers: { 'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' } })
    .then(handleApiResponse)
    .then(data => {
        if (data.success && data.analysis_results?.content_with_ce) {
            const contentDisplay = cosRow.querySelector('.cos-content-display');
            if (contentDisplay) {
                contentDisplay.innerHTML = data.analysis_results.content_with_ce;
            }
        } else {
            throw new Error(data.message || 'Analysis failed to return expected results.');
        }
    })
    .catch(error => {
        console.error('Error analyzing COS:', error);
        alert(`Analysis Failed: ${error.message}`);
    })
    .finally(() => {
        analyzeButton.disabled = false;
        analyzeButton.innerHTML = originalButtonHtml;
    });
}

function handleAddCOSButtonClick(event) {
    const button = event.currentTarget;
    const accordionBody = button.closest('.accordion-body');
    const ssolId = accordionBody?.dataset.ssolId;
    if (!ssolId) {
        alert('Cannot add COS: Critical data missing.');
        return;
    }

    const payload = { content: 'New Condition of Satisfaction - edit me!', status: 'Proposed', ssol_id: ssolId };
    button.disabled = true;
    const originalButtonText = button.innerHTML;
    button.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Adding...`;

    fetch(`/create_cos`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' },
        body: JSON.stringify(payload)
    })
    .then(handleApiResponse)
    .then(data => {
        if (data.success && data.cos) {
            let tbody = accordionBody.querySelector('table.phase-table tbody');
            if (!tbody) {
                const phaseNameIdentifier = button.dataset.phase;
                const newTableHtml = `
                    <table class="table table-striped table-hover phase-table" id="${phaseNameIdentifier}-table">
                        <thead>
                            <tr>
                                <th scope="col" style="width: 10%;">Status</th>
                                <th scope="col" style="width: 40%;">Condition of Satisfaction</th>
                                <th scope="col" style="width: 15%;">Accountable Party</th>
                                <th scope="col" style="width: 15%;">Completion Date</th>
                                <th scope="col" class="text-end actions-header" style="width: 20%;">Actions</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>`;
                accordionBody.querySelector('p')?.remove();
                accordionBody.insertAdjacentHTML('afterbegin', newTableHtml);
                tbody = accordionBody.querySelector('tbody');
            }
            const newRow = createCosTableRow(data.cos);
            tbody.appendChild(newRow);
        } else {
            throw new Error(data.error || 'Failed to create COS.');
        }
    })
    .catch(error => {
        console.error('Error creating COS:', error);
        alert(`Error: ${error.message}`);
    })
    .finally(() => {
        button.disabled = false;
        button.innerHTML = originalButtonText;
    });
}

function createCosTableRow(cos) {
    const newRow = document.createElement('tr');
    newRow.className = 'cos-row';
    newRow.dataset.cosId = cos.id;
    newRow.dataset.editing = 'false';
    const cosContentHtml = cos.content || '';
    const cosContentText = stripHtmlForTextarea(cosContentHtml);

    newRow.innerHTML = `
        <td class="status-cell align-middle">
            <span class="status-pill ${getBadgeClassFromStatus(cos.status)}">${cos.status.toUpperCase()}</span>
        </td>
        <td class="cos-content-cell align-middle">
            <div class="cos-content-display">${cosContentHtml}</div>
            <div class="cos-content-edit d-none">
                <textarea class="form-control form-control-sm cos-content-textarea" rows="3">${cosContentText}</textarea>
            </div>
        </td>
        <td class="cos-accountable-party-cell align-middle">
            <span class="cos-accountable-party-display">${cos.accountable_party || 'N/A'}</span>
            <input type="text" class="form-control form-control-sm cos-accountable-party-edit d-none" value="${cos.accountable_party || ''}">
        </td>
        <td class="cos-completion-date-cell align-middle">
            <span class="cos-completion-date-display">${cos.completion_date || 'N/A'}</span>
            <input type="date" class="form-control form-control-sm cos-completion-date-edit d-none" value="${cos.completion_date || ''}">
        </td>
        <td class="text-end actions-cell align-middle">
            <div class="btn-group cos-actions" role="group">
                <button class="btn btn-sm btn-primary edit-cos-button" title="Edit COS"><i class="fas fa-edit"></i></button>
                <button class="btn btn-sm btn-success update-cos-button d-none" title="Update COS"><i class="fas fa-check"></i></button>
                <button class="btn btn-sm btn-secondary cancel-cos-button d-none" title="Cancel Edit"><i class="fas fa-times"></i></button>
                <button class="btn btn-sm btn-danger delete-cos-button" title="Delete COS"><i class="fas fa-trash"></i></button>
                <button class="btn btn-sm btn-info analyze-cos-button" data-cos-id="${cos.id}" title="Analyze COS"><i class="fas fa-search-plus"></i></button>
            </div>
        </td>
    `;
    return newRow;
}


function handleCEPillClick(pill) {
    const ceId = pill.dataset.ceId;
    if (!ceId) return;

    showLoadingSpinner("Analyzing Conditional Element...");

    const ceType = pill.dataset.ceType || "Default";
    const cosRow = pill.closest('.cos-row');
    const cosContentDisplay = cosRow?.querySelector('.cos-content-display');
    const cosContextContent = cosContentDisplay?.innerHTML || '';

    const accordionItem = cosRow?.closest('.accordion-item');
    const phaseButton = accordionItem?.querySelector('.accordion-header .accordion-button');
    const phaseName = phaseButton?.textContent.trim().replace(/\s*PHASE\s*$/i, "").trim() || "Unknown Phase";
    
    const phaseIndex = accordionItem ? Array.from(accordionItem.parentElement.children).indexOf(accordionItem) : 0;

    const ssolGoal = document.querySelector('#ssol-goal')?.textContent.trim() || "SSOL Goal Not Available";

    const payload = { ce_id: ceId, cos_content: cosContextContent, phase_name: phaseName, phase_index: phaseIndex, ssol_goal: ssolGoal };

    fetch(`/get_ce_modal/${encodeURIComponent(ceType)}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
    })
    .then(handleApiResponse)
    .then(data => {
        if (data.modal_html) {
            // --- BUG FIX #2: Pass both the modal HTML and the ceId ---
            displayCEModal(data.modal_html, ceId);
        } else {
            throw new Error(data.error || 'Modal HTML content not found.');
        }
    })
    .catch(error => {
        console.error('Error fetching or displaying CE modal:', error);
        alert(`Error: ${error.message}`);
    })
    .finally(() => {
        hideLoadingSpinner();
    });
}

function triggerPdfExport(ssolId) {
    const printableElement = document.documentElement.cloneNode(true);
    const selectorsToRemove = [
        'script', '.cos-actions', '.add-cos', '#save-as-pdf-button',
        '.modal', '#dynamicModalContainer', '.cos-content-edit',
        '.cos-accountable-party-edit', '.cos-completion-date-edit',
        'select.status-edit-select', '#image-error-container'
    ];
    printableElement.querySelectorAll(selectorsToRemove.join(', ')).forEach(el => el.remove());
    printableElement.querySelectorAll('.accordion-collapse').forEach(collapse => collapse.classList.add('show'));
    printableElement.querySelectorAll('.accordion-button').forEach(button => button.classList.remove('collapsed'));
    printableElement.querySelectorAll('img').forEach(img => {
        if (img.src && !img.src.startsWith('http') && !img.src.startsWith('data:')) {
            try {
                img.src = new URL(img.getAttribute('src'), window.location.href).href;
            } catch (e) { console.warn("Could not convert image src to absolute URL:", img.src, e); }
        }
    });
    const htmlContent = printableElement.outerHTML;
    const pdfButton = document.getElementById('save-as-pdf-button');
    const originalButtonHtml = pdfButton.innerHTML;
    pdfButton.disabled = true;
    pdfButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';

    fetch(`/save_as_pdf/${ssolId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ htmlContent: htmlContent })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => { throw new Error(err.error || `PDF generation failed.`); });
        }
        return response.blob();
    })
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `SSPEC_Solution_${ssolId}.pdf`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
    })
    .catch(error => {
        console.error('Error saving PDF:', error);
        alert(`PDF Export Error: ${error.message}`);
    })
    .finally(() => {
        pdfButton.disabled = false;
        pdfButton.innerHTML = originalButtonHtml;
    });
}

// --- Global Initialization ---
function initializePageEventListeners() {
    document.querySelectorAll('.phase-table-container').forEach(container => {
        container.removeEventListener('click', handlePhaseTableBodyClick);
        container.addEventListener('click', handlePhaseTableBodyClick);
    });

    document.querySelectorAll('.add-cos').forEach(button => {
        button.removeEventListener('click', handleAddCOSButtonClick);
        button.addEventListener('click', handleAddCOSButtonClick);
    });

    const savePdfButton = document.getElementById('save-as-pdf-button');
    savePdfButton?.addEventListener('click', (event) => {
        event.preventDefault();
        triggerPdfExport(savePdfButton.dataset.ssolId);
    });
}

document.addEventListener('DOMContentLoaded', initializePageEventListeners);

‚¨ú speculate.py:
# speculate.py (Complete and Refactored with async/await fixes)
import re
import os
import html
import json
import uuid
from uuid import UUID
import logging
from bs4 import BeautifulSoup
from flask import current_app
from ce_nodes import NODES, get_valid_node_types # Assuming NODES is defined here or imported
from ce_templates import replace_ce_tags_with_pills
from sqlalchemy.exc import SQLAlchemyError
from ai_service import generate_chat_response_with_node_types, generate_chat_response # Ensure these are correctly async

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- NEW SAFE EXTRACTION HELPER ---
def _safe_get_ai_data(data_dict, key):
    """Safely retrieves a key, cleaning up surrounding quotes and whitespace."""
    if not isinstance(data_dict, dict):
        return None
    
    # Check for variants of the key (strip whitespace and surrounding quotes)
    key_variants = [
        key,
        key.strip(),
        f'"{key}"',
        f'"{key}"'.strip(),
        f'  "{key}"'.strip(),
        f' {key} '.strip()
    ]
    
    for k in set(key_variants): # Use set to avoid redundant checks
        if k in data_dict:
            return data_dict[k]
        
        # Check if the key exists after stripping the key string itself
        # This handles cases where the AI is returning keys like "  "analyzed_cos_text"  "
        for dict_key in data_dict.keys():
            if str(dict_key).strip().strip('"').lower() == key.lower():
                return data_dict[dict_key]
        
    return None

# --- COS Analysis and CE Pill Generation ---
async def analyze_cos(cos_content: str, cos_id: str = None) -> dict:
    """
    Analyzes COS content using AI to identify CEs, and prepares content with CE pills.
    Returns a dictionary: {'content_with_ce': <html_string>, 'ces_data_list': [<ce_dict>, ...]}
    """
    # --- START OF FIX ---
    # The f-string correctly handles variable interpolation. The trailing .format() call
    # was incorrect and has been removed.
    prompt = (
        f"Analyze the following Condition of Satisfaction (COS) text: '{cos_content}'. "
        "Identify all Conditional Elements (CEs) within this text. "
        "A CE is a specific part of the COS that requires further detail or action. "
        f"For each CE found, determine its most appropriate 'NodeType' from this list ONLY: {', '.join(get_valid_node_types())}. "
        "Your response MUST be a valid JSON object with two keys: "
        "'analyzed_cos_text': This should be the original COS text but with each identified CE "
        "wrapped in <ce type='NodeType'>Your CE Text Here</ce> tags. " # Explicitly ask for tags in text
        "And 'identified_ces': an array of objects, where each object represents a CE and has 'text' and 'type' keys. "
        "Example JSON: "
        '{'
        '  "analyzed_cos_text": "The <ce type=\'Research\'>literature review</ce> must be completed and <ce type=\'Stakeholder\'>key experts</ce> identified.",'
        '  "identified_ces": ['
        '    {"text": "literature review", "type": "Research"},'
        '    {"text": "key experts", "type": "Stakeholder"}'
        '  ]'
        '}'
    ) # <-- The incorrect .format() call was here. It has been removed.
    # --- END OF FIX ---


    messages = [
        {"role": "system", "content": "You are an expert in analyzing text to identify conditional elements and structure them in JSON. Ensure NodeTypes are from the provided list. The 'analyzed_cos_text' MUST include the <ce> tags."},
        {"role": "user", "content": prompt},
    ]
    response_text = "" # Initialize for logging in case of error
    try:
        response_text = await generate_chat_response_with_node_types(messages, role='COS Analysis', task='Analyze COS for CEs')
        response_json = json.loads(response_text)

        # Text from AI, now expected to have <ce> tags embedded by the AI
        ai_analyzed_text_with_tags = response_json.get("analyzed_cos_text", cos_content)
        
        # List of CEs identified by AI (primarily for data structuring if needed, pills come from tags)
        ai_identified_ces_list = response_json.get("identified_ces", [])

        # Convert ai_identified_ces_list to the structure expected by replace_ce_tags_with_pills if needed for metadata
        ces_data_for_pills = []
        for ce_item in ai_identified_ces_list:
            if ce_item.get("type") in get_valid_node_types():
                ce_data = {
                    'content': ce_item.get("text", ""),
                    'node_type': ce_item.get("type")
                }
                if cos_id: # If cos_id is available, link it
                    ce_data['cos_id'] = cos_id
                # 'id' for CE pill will be generated by replace_ce_tags_with_pills
                ces_data_for_pills.append(ce_data)

        # `replace_ce_tags_with_pills` will find <ce type='...'> tags in `ai_analyzed_text_with_tags`
        # and replace them with interactive <span class="ce-pill" data-ce-id="..." ...> pills.
        content_with_pills_html = replace_ce_tags_with_pills(ai_analyzed_text_with_tags, ces_data_for_pills)

        # For creating CE records, we need a list of CEs with their final text and type, and generated IDs
        final_ces_data_list = []
        soup = BeautifulSoup(content_with_pills_html, 'html.parser')
        for pill_tag in soup.find_all('span', class_='ce-pill'):
            final_ces_data_list.append({
                'id': pill_tag.get('data-ce-id'), # The UUID generated by replace_ce_tags_with_pills
                'content': pill_tag.string if pill_tag.string else "",
                'node_type': pill_tag.get('data-ce-type'),
                'cos_id': cos_id # Link back to the parent COS
            })
        
        return {'content_with_ce': content_with_pills_html, 'ces_data_list': final_ces_data_list}

    except json.JSONDecodeError as e:
        current_app.logger.error(f"JSONDecodeError in analyze_cos: {e}. AI Response: '{response_text}'", exc_info=True)
        # Fallback: return original content, no CEs identified
        return {'content_with_ce': html.escape(cos_content), 'ces_data_list': []}
    except Exception as e:
        current_app.logger.error(f"Exception in analyze_cos: {e}. AI Response: '{response_text}'", exc_info=True)
        return {'content_with_ce': html.escape(cos_content), 'ces_data_list': []}

async def create_cos(USE_DATABASE: bool, ssol_id: UUID, content: str, status: str, accountable_party: str = None, completion_date=None) -> str:
    from models import COS, CE, get_engine_and_session
    from store import ce_store, cos_store
    from app import app
    from sqlalchemy.exc import SQLAlchemyError

    analysis_result = {}
    cos_id_str = None
    
    try:
        new_cos_uuid = uuid.uuid4()
        cos_id_str = str(new_cos_uuid)

        analysis_result = await analyze_cos(content, cos_id_str)
        content_with_pills = analysis_result['content_with_ce']
        extracted_ces_data = analysis_result['ces_data_list']

        if USE_DATABASE:
            with app.app_context():
                engine, SessionLocal = get_engine_and_session()
                session = SessionLocal()
                try:
                    # FIX: Robustly handle completion_date to prevent DB errors with empty strings.
                    if completion_date in ['None', 'N/A', '', None]:
                         completion_date_for_db = None
                    else:
                        completion_date_for_db = completion_date

                    cos_instance = COS(
                        id=new_cos_uuid,
                        content=content_with_pills,
                        status=status,
                        accountable_party=accountable_party,
                        completion_date=completion_date_for_db, # Use sanitized variable
                        ssol_id=ssol_id
                    )
                    session.add(cos_instance)

                    for ce_data in extracted_ces_data:
                        ce_uuid = UUID(ce_data['id'])
                        ce_instance = CE(
                            id=ce_uuid,
                            content=ce_data['content'],
                            node_type=ce_data['node_type'],
                            cos_id=new_cos_uuid
                        )
                        session.add(ce_instance)
                        
                    session.commit()
                    
                except SQLAlchemyError as db_e:
                    session.rollback()
                    current_app.logger.error(f"DB Error on create_cos (SSOL: {ssol_id}, COS: {cos_id_str}): {db_e}", exc_info=True)
                    raise Exception(f"Database error while saving Condition of Satisfaction.") from db_e
                finally:
                    if session.is_active: 
                        session.close()
        else: # In-memory logic remains the same
            cos_record = {
                'id': cos_id_str,
                'content': content_with_pills,
                'status': status,
                'ssol_id': str(ssol_id),
                'accountable_party': accountable_party,
                'completion_date': str(completion_date) if completion_date else None,
                'conditional_elements': []
            }
            cos_store[cos_id_str] = cos_record

            for ce_data in extracted_ces_data:
                ce_record = {
                    'id': ce_data['id'], 'content': ce_data['content'],
                    'node_type': ce_data['node_type'], 'cos_id': cos_id_str
                }
                ce_store[ce_data['id']] = ce_record
                cos_record['conditional_elements'].append(ce_record)
        
        return cos_id_str

    except ValueError as e:
        current_app.logger.error(f"Data validation error creating COS (SSOL: {ssol_id}): {e}", exc_info=True)
        raise ValueError(f"Data error: {str(e)}") from e
    except Exception as e:
        current_app.logger.error(f"General Error creating COS (SSOL: {ssol_id}, COS: {cos_id_str}): {e}", exc_info=True)
        raise

def get_cos_by_id(USE_DATABASE: bool, cos_id: UUID): # Expects UUID if DB, can be str if not
    from models import COS, get_engine_and_session
    from store import cos_store
    from app import app

    if USE_DATABASE:
        if not isinstance(cos_id, UUID): # Ensure it's UUID for DB query
            try:
                cos_id = UUID(str(cos_id))
            except ValueError:
                current_app.logger.error(f"Invalid UUID format for cos_id: {cos_id}")
                return None
        with app.app_context():
            engine, session = get_engine_and_session()
            cos = session.query(COS).get(cos_id)
            session.close()
            return cos
    else:
        return cos_store.get(str(cos_id))


async def update_cos_by_id(USE_DATABASE: bool, cos_id_param: UUID, updated_data: dict) -> dict:
    from models import COS, CE, get_engine_and_session
    from store import cos_store, ce_store
    from app import app

    analysis_result = {} # Initialize
    try:
        cos_id_uuid = cos_id_param # Already UUID from routes.py
        cos_id_str = str(cos_id_uuid)

        new_content_text = updated_data.get('content') # This is likely plain text from textarea
        content_with_pills_for_update = None
        new_ces_data_list_from_analysis = []

        if new_content_text is not None:
            # Re-analyze the plain text content to regenerate CE pills and CE data list
            analysis_result = await analyze_cos(new_content_text, cos_id_str)
            content_with_pills_for_update = analysis_result['content_with_ce']
            new_ces_data_list_from_analysis = analysis_result['ces_data_list']
            # Update the 'content' in updated_data to be the HTML with pills
            updated_data['content'] = content_with_pills_for_update
        
        if USE_DATABASE:
            with app.app_context():
                engine, session = get_engine_and_session()
                cos = session.query(COS).get(cos_id_uuid)
                if not cos:
                    session.close()
                    return {'success': False, 'message': f"COS {cos_id_str} not found.", 'status_code': 404}

                # Update standard COS fields (excluding 'content' if it was processed)
                for key, value in updated_data.items():
                    if key not in ['conditional_elements', 'id', 'ssol_id']: # Content already handled
                        setattr(cos, key, value)
                
                # If content was updated and re-analyzed, update CEs
                if new_content_text is not None:
                    # Strategy: Delete existing CEs for this COS, then add the new ones.
                    session.query(CE).filter_by(cos_id=cos_id_uuid).delete(synchronize_session=False)
                    session.flush() # Ensure deletes are processed before adds if there are constraints

                    for ce_data in new_ces_data_list_from_analysis:
                        new_ce_instance = CE(
                            id=UUID(ce_data['id']), # ID from analysis (generated by replace_ce_tags_with_pills)
                            content=ce_data['content'],
                            node_type=ce_data['node_type'],
                            cos_id=cos_id_uuid
                        )
                        session.add(new_ce_instance)
                
                session.commit()
                # Fetch fresh to_dict to include updated CEs relation
                updated_cos_dict = cos.to_dict()
                session.close()
                return {'success': True, 'cos': updated_cos_dict}
        else: # In-memory store
            cos_record = cos_store.get(cos_id_str)
            if not cos_record:
                return {'success': False, 'message': f"COS {cos_id_str} not found.", 'status_code': 404}

            # Update standard fields
            for key, value in updated_data.items():
                if key != 'conditional_elements': # content is handled if re-analyzed
                    cos_record[key] = value
            
            if new_content_text is not None:
                # Clear old CEs from ce_store and the cos_record's list
                if 'conditional_elements' in cos_record:
                    for old_ce in cos_record['conditional_elements']:
                        ce_store.pop(old_ce['id'], None)
                cos_record['conditional_elements'] = []

                # Add new CEs
                for ce_data in new_ces_data_list_from_analysis:
                    new_ce_dict = {
                        'id': ce_data['id'],
                        'content': ce_data['content'],
                        'node_type': ce_data['node_type'],
                        'cos_id': cos_id_str
                    }
                    ce_store[ce_data['id']] = new_ce_dict
                    cos_record['conditional_elements'].append(new_ce_dict)
            
            return {'success': True, 'cos': cos_record}

    except KeyError as e:
        current_app.logger.error(f"KeyError updating COS {cos_id_param}: {e}. Analysis result: {analysis_result}", exc_info=True)
        return {'success': False, 'message': f"Data error: {str(e)}", 'status_code': 400} # Or 500
    except Exception as e:
        current_app.logger.error(f"Error updating COS {cos_id_param}: {e}", exc_info=True)
        if USE_DATABASE and 'session' in locals() and session.is_active:
            session.rollback(); session.close()
        return {'success': False, 'message': f"Unexpected error: {str(e)}", 'status_code': 500}


def delete_cos_by_id(USE_DATABASE: bool, cos_id: UUID) -> bool: # Expects UUID
    from models import COS, CE, get_engine_and_session
    from store import cos_store, ce_store
    from app import app

    try:
        cos_id_uuid = cos_id # Already UUID from routes.py
        cos_id_str = str(cos_id_uuid)

        if USE_DATABASE:
            with app.app_context():
                engine, session = get_engine_and_session()
                # Delete associated CEs first due to foreign key constraints
                session.query(CE).filter_by(cos_id=cos_id_uuid).delete(synchronize_session=False)
                # Then delete the COS
                cos = session.query(COS).get(cos_id_uuid)
                if cos:
                    session.delete(cos)
                    session.commit()
                    session.close()
                    return True
                session.close()
                return False
        else:
            if cos_id_str in cos_store:
                # Also remove associated CEs from ce_store
                cos_record = cos_store.get(cos_id_str, {})
                for ce_data in cos_record.get('conditional_elements', []):
                    ce_store.pop(ce_data['id'], None)
                del cos_store[cos_id_str]
                return True
            return False
    except Exception as e:
        current_app.logger.error(f"Error deleting COS {cos_id}: {e}", exc_info=True)
        if USE_DATABASE and 'session' in locals() and session.is_active: # Check if session was defined and is active
            session.rollback()
            session.close()
        return False

# --- SSOL CRUD Operations (Example Stubs - Implement as needed) ---
def create_ssol(USE_DATABASE: bool, title: str, description: str) -> str:
    from models import SSOL, get_engine_and_session
    from store import ssol_store
    from app import app

    if USE_DATABASE:
        with app.app_context():
            engine, session = get_engine_and_session()
            new_ssol_uuid = uuid.uuid4()
            ssol = SSOL(id=new_ssol_uuid, title=title, description=description)
            session.add(ssol)
            session.commit()
            ssol_id_to_return = str(new_ssol_uuid)
            session.close()
            return ssol_id_to_return
    else:
        ssol_id = str(uuid.uuid4())
        ssol_store[ssol_id] = {'id': ssol_id, 'title': title, 'description': description, 'phases': {}} # Added phases
        return ssol_id

def get_ssol_by_id(USE_DATABASE: bool, ssol_id: UUID): # Expects UUID if DB
    from models import SSOL, get_engine_and_session
    from store import ssol_store
    from app import app
    if USE_DATABASE:
        if not isinstance(ssol_id, UUID): ssol_id = UUID(str(ssol_id))
        with app.app_context():
            engine, session = get_engine_and_session()
            ssol = session.query(SSOL).get(ssol_id)
            session.close()
            return ssol
    else:
        return ssol_store.get(str(ssol_id))

# --- CE CRUD Operations ---
def get_ce_by_id(USE_DATABASE: bool, ce_id_param): # ce_id_param can be str or UUID
    """
    Retrieves a Conditional Element (CE) by its ID, preparing it in a format
    suitable for the frontend modal (with 'form_data' and 'table_data' keys).

    Args:
        USE_DATABASE (bool): Flag indicating whether to use the database or in-memory store.
        ce_id_param: The ID of the CE to retrieve (can be a UUID object or a string).

    Returns:
        dict: A dictionary representing the CE data, or None if not found or an error occurs.
    """
    # These imports are typically at the top of the file, but placed here
    # to ensure the function is self-contained for this example if copied directly.
    # In a real project, they'd be at the module level.
    from models import CE, get_engine_and_session
    from store import ce_store
    from app import app # Required for app_context

    ce_id_uuid = None
    if isinstance(ce_id_param, UUID):
        ce_id_uuid = ce_id_param
    else:
        try:
            ce_id_uuid = UUID(str(ce_id_param))
        except ValueError:
            current_app.logger.error(f"Invalid UUID format for ce_id: '{ce_id_param}'")
            return None

    try:
        if USE_DATABASE:
            with app.app_context(): # Ensure Flask application context for database operations
                engine, SessionLocal = get_engine_and_session() # Get engine and session factory
                session = SessionLocal() # Create a new session
                try:
                    ce_db_instance = session.query(CE).get(ce_id_uuid)
                    if ce_db_instance:
                        # CE.to_dict() is expected to parse 'content' (for form_data)
                        # and 'details' (for table_data) if they are JSON strings.
                        ce_data_to_return = ce_db_instance.to_dict()
                    else:
                        current_app.logger.debug(f"CE with ID {ce_id_uuid} not found in database.")
                        ce_data_to_return = None
                except Exception as db_exc:
                    current_app.logger.error(f"Database error retrieving CE {ce_id_uuid}: {db_exc}", exc_info=True)
                    ce_data_to_return = None # Or re-raise
                finally:
                    session.close() # Always close the session
            return ce_data_to_return
        else: # In-memory store
            ce_from_store = ce_store.get(str(ce_id_uuid))
            if ce_from_store:
                # Ensure in-memory data conforms to the 'form_data' and 'table_data' structure
                # Default to empty structures if keys are missing or data is malformed

                # Process 'content' for form_data
                form_data_mem = {}
                raw_content = ce_from_store.get('content')
                if isinstance(raw_content, str):
                    try:
                        form_data_mem = json.loads(raw_content)
                        if not isinstance(form_data_mem, dict):
                            form_data_mem = {} # Ensure it's a dict
                    except json.JSONDecodeError:
                        # If content isn't JSON, it might be a primary value.
                        # For consistency with the expected 'form_data' object,
                        # you might map it to a default key or log a warning.
                        # E.g., form_data_mem = {'primary_field': raw_content}
                        current_app.logger.debug(f"In-memory CE {ce_id_uuid} 'content' is not JSON: '{raw_content}'")
                        form_data_mem = {} # Defaulting to empty if not parseable JSON
                elif isinstance(raw_content, dict):
                    form_data_mem = raw_content # Already a dictionary

                # Process 'details' for table_data
                table_data_mem = []
                raw_details = ce_from_store.get('details')
                if isinstance(raw_details, str):
                    try:
                        table_data_mem = json.loads(raw_details)
                        if not isinstance(table_data_mem, list):
                            table_data_mem = [] # Ensure it's a list
                    except json.JSONDecodeError:
                        current_app.logger.debug(f"In-memory CE {ce_id_uuid} 'details' is not JSON: '{raw_details}'")
                        table_data_mem = []
                elif isinstance(raw_details, list):
                    table_data_mem = raw_details # Already a list

                return {
                    'id': ce_from_store.get('id', str(ce_id_uuid)),
                    'node_type': ce_from_store.get('node_type'),
                    'cos_id': ce_from_store.get('cos_id'),
                    'form_data': form_data_mem,
                    'table_data': table_data_mem
                }
            else:
                current_app.logger.debug(f"CE with ID {ce_id_uuid} not found in in-memory store.")
                return None

    except ValueError as ve: # Should be caught by initial UUID conversion, but as a safeguard
        current_app.logger.error(f"ValueError processing CE ID '{ce_id_param}': {ve}", exc_info=True)
        return None
    except Exception as e:
        current_app.logger.error(f"Unexpected error in get_ce_by_id for CE ID '{ce_id_param}': {e}", exc_info=True)
        return None # Or re-raise if the calling route should handle it as a 500 error


def create_ce(USE_DATABASE: bool, content: str, node_type: str, cos_id: UUID) -> str: # cos_id is UUID
    from models import CE, get_engine_and_session
    from store import ce_store
    from app import app

    new_ce_uuid = uuid.uuid4()
    ce_id_str = str(new_ce_uuid)

    if USE_DATABASE:
        with app.app_context():
            engine, session = get_engine_and_session()
            ce = CE(id=new_ce_uuid, content=content, node_type=node_type, cos_id=cos_id)
            session.add(ce)
            session.commit()
            session.close()
    else:
        ce_data = {'id': ce_id_str, 'content': content, 'node_type': node_type, 'cos_id': str(cos_id)}
        ce_store[ce_id_str] = ce_data
    return ce_id_str


def update_ce_by_id(USE_DATABASE: bool, ce_id: UUID, ce_data: dict) -> bool: # Expects UUID
    from models import CE, get_engine_and_session
    from store import ce_store
    from app import app

    ce_id_uuid = ce_id # Already UUID from routes.py
    ce_id_str = str(ce_id_uuid)

    if USE_DATABASE:
        with app.app_context():
            engine, session = get_engine_and_session()
            ce = session.query(CE).get(ce_id_uuid)
            if ce:
                for key, value in ce_data.items():
                    if hasattr(ce, key) and key not in ['id', 'cos_id']: # Don't update PK or FK directly
                        setattr(ce, key, value)
                session.commit()
                session.close()
                return True
            session.close()
            return False
    else:
        if ce_id_str in ce_store:
            ce_store[ce_id_str].update(ce_data)
            return True
        return False

def delete_ce_by_id(USE_DATABASE: bool, ce_id: UUID) -> bool: # Expects UUID
    from models import CE, get_engine_and_session
    from store import ce_store
    from app import app
    
    ce_id_uuid = ce_id # Already UUID from routes.py
    ce_id_str = str(ce_id_uuid)

    if USE_DATABASE:
        with app.app_context():
            engine, session = get_engine_and_session()
            ce = session.query(CE).get(ce_id_uuid)
            if ce:
                session.delete(ce)
                session.commit()
                session.close()
                return True
            session.close()
            return False
    else:
        return bool(ce_store.pop(ce_id_str, None))


# --- Initial SSOL Generation Logic ---
def parse_ai_response_and_generate_html(USE_DATABASE: bool, response_json: dict, ssol_id_for_cos: UUID) -> dict:
    """
    Parses AI response for phases and COS, generates CE pills, and structures data.
    This function is called during initial SSOL creation.
    It PREPARES the data structure including CE pills. Actual DB save for COS/CE happens elsewhere (e.g., in create_cos).
    However, if this is part of a larger initial save, it can create CE records if needed.
    For initial generation, CEs are created based on tags in AI content.
    """
    from models import COS, CE, get_engine_and_session # Local import if creating DB records here
    from store import cos_store, ce_store            # Local import for in-memory
    from app import app                          # For app_context

    structured_solution = {}
    expected_phases = ["Discovery", "Engagement", "Action", "Completion", "Legacy"]

    # This ssol_id_for_cos is the ID of the SSOL these COS objects will belong to.
    # It's NOT the COS ID itself.

    for phase_name in expected_phases:
        structured_solution[phase_name] = []
        cos_list_from_ai = response_json.get(phase_name, [])

        for cos_dict_from_ai in cos_list_from_ai:
            # Each COS gets a new unique ID
            cos_uuid = uuid.uuid4()
            cos_id_str = str(cos_uuid)
            
            # Raw content from AI, expected to have <ce type="...">...</ce> tags
            raw_cos_content_from_ai = cos_dict_from_ai.get('content', '')

            # Use replace_ce_tags_with_pills to convert <ce> tags to <span class="ce-pill" data-ce-id="...">
            # This will generate unique UUIDs for data-ce-id attributes on the pills.
            # The second argument (list of CEs) to replace_ce_tags_with_pills is for metadata like counts,
            # which isn't typically available at this initial generation stage from this specific AI prompt.
            # So, we pass an empty list for that.
            content_with_html_pills = replace_ce_tags_with_pills(raw_cos_content_from_ai, [])

            # Now, extract the CE data (including their generated UUIDs) from the HTML with pills
            ces_for_this_cos_data = []
            soup = BeautifulSoup(content_with_html_pills, 'html.parser')
            for pill_tag in soup.find_all('span', class_='ce-pill'):
                ce_pill_id_str = pill_tag.get('data-ce-id')
                ce_content_text = pill_tag.string if pill_tag.string else ""
                ce_node_type = pill_tag.get('data-ce-type')

                if ce_pill_id_str and ce_node_type: # Basic validation
                    ce_data_item = {
                        'id': ce_pill_id_str, # This is the CE's own ID (from pill)
                        'content': ce_content_text,
                        'node_type': ce_node_type,
                        'cos_id': cos_id_str # Link to the parent COS ID we just generated
                    }
                    ces_for_this_cos_data.append(ce_data_item)

                    # PERSIST CE to DB or In-Memory Store HERE during initial SSOL generation
                    if USE_DATABASE:
                        with app.app_context(): # Ensure context for DB operations
                            engine, session = get_engine_and_session()
                            ce_instance = CE(
                                id=UUID(ce_pill_id_str),
                                content=ce_content_text,
                                node_type=ce_node_type,
                                cos_id=cos_uuid # Use the UUID of the parent COS
                            )
                            session.add(ce_instance)
                            # Commit for CEs could happen after all COS for this SSOL, or per COS
                            # For now, let's assume a commit will happen after this function or per SSOL.
                            # If committing here: session.commit() then session.close()
                    else:
                        ce_store[ce_pill_id_str] = ce_data_item


            # Structure for the COS to be added to the SSOL's phase
            # This COS itself is not yet saved if using DB, only its CEs are staged/saved above.
            # The actual COS record for DB will be created by the calling function (e.g. generate_outcome_data -> which should call create_cos)
            # This function prepares the structure that `generate_outcome_data` will use.
            
            # Store the COS in the appropriate data store
            # The ID for this COS is cos_id_str (or cos_uuid)
            # The accountable_party and completion_date are not typically generated by this AI call,
            # so they'd be empty/None initially.
            if USE_DATABASE:
                with app.app_context():
                    engine, session = get_engine_and_session()
                    new_cos_db = COS(
                        id=cos_uuid,
                        content=content_with_html_pills,
                        status='Proposed',
                        ssol_id=ssol_id_for_cos, # Link to parent SSOL
                        accountable_party=None,
                        completion_date=None
                        # CEs are linked via their own cos_id pointing to this cos_uuid
                    )
                    session.add(new_cos_db)
                    # Defer commit to allow all parts of SSOL to be added in one transaction
            else: # In-memory
                 cos_store[cos_id_str] = {
                    'id': cos_id_str,
                    'content': content_with_html_pills,
                    'status': 'Proposed',
                    'ssol_id': str(ssol_id_for_cos),
                    'accountable_party': None,
                    'completion_date': None,
                    'conditional_elements': ces_for_this_cos_data # Store list of CE dicts
                }


            # Add to the structured_solution for returning to `generate_outcome_data`
            # This dict is what gets rendered in `outcome.html`
            structured_solution[phase_name].append({
                'id': cos_id_str, # ID of this COS
                'content': content_with_html_pills, # HTML content with CE pills
                'status': 'Proposed', # Default status
                'accountable_party': None, # Default
                'completion_date': None,   # Default
                # 'ces': ces_for_this_cos_data # This was how it was before, but conditional_elements is the model field.
                                             # For rendering, `cos.content` has the pills.
                                             # If JS needs separate list of CEs, this can be added.
                                             # The `to_dict()` method of COS model will provide `conditional_elements`
            })
    
    # If using DB, the session that added all these COS and CE instances
    # should be committed by the calling function (e.g., in generate_outcome_data or after it).
    if USE_DATABASE:
        with app.app_context():
            engine, session = get_engine_and_session()
            try:
                session.commit()
            except Exception as e:
                session.rollback()
                current_app.logger.error(f"Error committing initial SSOL COS/CEs: {e}", exc_info=True)
                raise
            finally:
                session.close()

    return structured_solution

üè≥Ô∏è‚Äçüåà ce_nodes.py:
# ce_nodes.py

NODES = {  
    "Default": {  
        "definition": "This node is a default research mode for undefined node types.",  
        "icon": "fa-solid fa-icons",
        "color": "#95a5a6",  # Neutral Grey
        "modal_config": {  
            "fields": [  
                {"type": "text", "name": "subject", "placeholder": "Subject"},  
                {"type": "textarea", "name": "details", "placeholder": "Details"},  
                {"type": "text", "name": "stakeholders", "placeholder": "Stakeholders"}  
            ],  
            "explanation": "Default Resource Node.",  
            "ai_context": "Provide general information and suggestions to help achieve the Condition of Satisfaction (COS)."  
        },  
        "tabulator_config": {  
            "columns": [  
                {"title": "Subject", "field": "subject", "editor": "input"},  
                {"title": "Details", "field": "details", "editor": "input"},  
                {"title": "Stakeholders", "field": "stakeholders", "editor": "input"}  
            ]  
        }  
    },  
    "Research": {  
        "definition": "Aggregates and summarizes research materials and resources pertinent to the COS.",  
        "icon": "fa-solid fa-flask",
        "color": "#ec407a",  # Light Pink (from Discovery)
        "modal_config": {  
            "fields": [  
                {"type": "text", "name": "research_topic", "placeholder": "Research Topic"},  
                {"type": "textarea", "name": "research_summary", "placeholder": "Research Summary"},  
                {"type": "text", "name": "research_website", "placeholder": "Research Website"}  
            ],  
            "explanation": "Capture relevant research aspects of the node.",  
            "ai_context": "Provide detailed research information, studies, and academic resources relevant to the COS."  
        },  
        "tabulator_config": {  
            "columns": [  
                {"title": "Research Topic", "field": "research_topic", "editor": "input"},  
                {"title": "Research Summary", "field": "research_summary", "editor": "textarea"},  
                {"title": "Research Website", "field": "research_website", "editor": "input"}  
            ]  
        }  
    },  
    "Stakeholder": {
        "definition": "Captures details of stakeholders involved in the COS.",
        "icon": "fa-solid fa-user-friends",
        "color": "#ffca28",  # Amber (Analogous to Completion)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "stakeholder_name", "placeholder": "Stakeholder Name"},
                {"type": "textarea", "name": "stakeholder_role", "placeholder": "Stakeholder Role"},
                {"type": "email", "name": "stakeholder_email", "placeholder": "Stakeholder Email"},
                {"type": "text", "name": "stakeholder_phone", "placeholder": "Stakeholder Phone"},
            ],
            "explanation": "Detail the roles and contact information of stakeholders related to the COS.",
            "ai_context": "Identify and provide details of stakeholders involved in the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Stakeholder Name", "field": "stakeholder_name", "editor": "input"},
                {"title": "Stakeholder Role", "field": "stakeholder_role", "editor": "textarea"},
                {"title": "Stakeholder Email", "field": "stakeholder_email", "editor": "input"},
                {"title": "Stakeholder Phone", "field": "stakeholder_phone", "editor": "input"},
            ]
        }
    },
    "Advocacy": {  
        "definition": "Focuses on efforts to influence public policy and resource allocation decisions.",  
        "icon": "fa-solid fa-bullhorn",
        "color": "#ff7043",  # Deep Orange (Analogous)
        "modal_config": {  
            "fields": [  
                {"type": "text", "name": "campaign_name", "placeholder": "Campaign Name"},  
                {"type": "textarea", "name": "campaign_objective", "placeholder": "Campaign Objective"},  
                {"type": "text", "name": "target_audience", "placeholder": "Target Audience"}  
            ],  
            "explanation": "Detail the advocacy campaign's objectives and target audience.",  
            "ai_context": "Provide information on advocacy efforts and campaign strategies pertinent to the COS."  
        },  
        "tabulator_config": {  
            "columns": [  
                {"title": "Campaign Name", "field": "campaign_name", "editor": "input"},  
                {"title": "Campaign Objective", "field": "campaign_objective", "editor": "textarea"},  
                {"title": "Target Audience", "field": "target_audience", "editor": "input"}  
            ]  
        }
    },
    "Resource": {
        "definition": "Lists resources or assets essential for achieving the COS.",
        "icon": "fa-solid fa-tools",
        "color": "#8d6e63",  # Brown (from Completion)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "resource_name", "placeholder": "Resource Name"},
                {"type": "textarea", "name": "resource_details", "placeholder": "Resource Details"},
                {"type": "text", "name": "resource_type", "placeholder": "Resource Type"}
            ],
            "explanation": "Provide details about resources or assets required for the COS.",
            "ai_context": "List and detail resources or assets essential for achieving the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Resource Name", "field": "resource_name", "editor": "input"},
                {"title": "Resource Details", "field": "resource_details", "editor": "textarea"},
                {"title": "Resource Type", "field": "resource_type", "editor": "input"}
            ]
        }
    },
    "Praxis": {
        "definition": "Defines actions or tasks necessary to meet the COS.",
        "icon": "fa-solid fa-tasks",
        "color": "#5c6bc0",  # Indigo (from Action)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "action_name", "placeholder": "Action Name"},
                {"type": "textarea", "name": "action_description", "placeholder": "Action Description"},
                {"type": "text", "name": "responsible_person", "placeholder": "Responsible Person"}
            ],
            "explanation": "Specify tasks or actions required to fulfill the COS.",
            "ai_context": "Detail actions or tasks necessary to meet the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Action Name", "field": "action_name", "editor": "input"},
                {"title": "Action Description", "field": "action_description", "editor": "textarea"},
                {"title": "Responsible Person", "field": "responsible_person", "editor": "input"}
            ]
        }
    },
    "Timeline": {
        "definition": "Specifies time frames or deadlines associated with the COS.",
        "icon": "fa-solid fa-clock",
        "color": "#ba68c8",  # Light Purple (from Action)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "time_frame", "placeholder": "Time Frame"},
                {"type": "date", "name": "start_date", "placeholder": "Start Date"},
                {"type": "date", "name": "end_date", "placeholder": "End Date"}
            ],
            "explanation": "Provide time-related information such as deadlines and schedules for the COS.",
            "ai_context": "Detail time frames or deadlines associated with the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Time Frame", "field": "time_frame", "editor": "input"},
                {"title": "Start Date", "field": "start_date", "editor": "input"},
                {"title": "End Date", "field": "end_date", "editor": "input"}
            ]
        }
    },
    "Collaboration": {
        "definition": "Focuses on partnerships or collaboration efforts necessary for the COS.",
        "icon": "fa-solid fa-handshake",
        "color": "#4dd0e1",  # Light Cyan (from Engagement)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "partner_name", "placeholder": "Partner Name"},
                {"type": "textarea", "name": "collaboration_details", "placeholder": "Collaboration Details"},
                {"type": "text", "name": "contact_person", "placeholder": "Contact Person"}
            ],
            "explanation": "Outline collaboration efforts and partnerships related to the COS.",
            "ai_context": "Detail partnerships or collaboration efforts necessary for the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Partner Name", "field": "partner_name", "editor": "input"},
                {"title": "Collaboration Details", "field": "collaboration_details", "editor": "textarea"},
                {"title": "Contact Person", "field": "contact_person", "editor": "input"}
            ]
        }
    },
    "Policy": {
        "definition": "Addresses policy or regulatory aspects pertinent to the COS.",
        "icon": "fa-solid fa-gavel",
        "color": "#78909c",  # Blue Grey (from Action)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "policy_name", "placeholder": "Policy Name"},
                {"type": "textarea", "name": "policy_details", "placeholder": "Policy Details"},
                {"type": "text", "name": "regulatory_body", "placeholder": "Regulatory Body"}
            ],
            "explanation": "Detail policies or regulations impacting the COS.",
            "ai_context": "Provide information on policies or regulatory aspects pertinent to the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Policy Name", "field": "policy_name", "editor": "input"},
                {"title": "Policy Details", "field": "policy_details", "editor": "textarea"},
                {"title": "Regulatory Body", "field": "regulatory_body", "editor": "input"}
            ]
        }
    },
    "Legislation": {
        "definition": "Covers legal considerations or requirements pertinent to the COS.",
        "icon": "fa-solid fa-balance-scale",
        "color": "#546e7a",  # Dark Blue Grey (from Action)
        "modal_config": {
            "fields": [
                {"type": "textarea", "name": "legal_requirements", "placeholder": "Legal Requirements"},
                {"type": "text", "name": "relevant_legislation", "placeholder": "Relevant Legislation"},
                {"type": "text", "name": "compliance_officer", "placeholder": "Compliance Officer"}
            ],
            "explanation": "Detail legal considerations and requirements for the COS.",
            "ai_context": "Provide information on legal considerations or requirements pertinent to the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Legal Requirements", "field": "legal_requirements", "editor": "textarea"},
                {"title": "Relevant Legislation", "field": "relevant_legislation", "editor": "input"},
                {"title": "Compliance Officer", "field": "compliance_officer", "editor": "input"}
            ]
        }
    },
    "Environment": {
        "definition": "Addresses environmental factors related to the COS.",
        "icon": "fa-solid fa-leaf",
        "color": "#66bb6a",  # Green (from Legacy)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "environmental_factor", "placeholder": "Environmental Factor"},
                {"type": "textarea", "name": "impact_assessment", "placeholder": "Impact Assessment"},
                {"type": "text", "name": "mitigation_strategy", "placeholder": "Mitigation Strategy"}
            ],
            "explanation": "Detail environmental factors and their impact on the COS.",
            "ai_context": "Provide information on environmental factors and impact assessments pertinent to the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Environmental Factor", "field": "environmental_factor", "editor": "input"},
                {"title": "Impact Assessment", "field": "impact_assessment", "editor": "textarea"},
                {"title": "Mitigation Strategy", "field": "mitigation_strategy", "editor": "input"}
            ]
        }
    },
    "Risk": {
        "definition": "Identifies potential risks and mitigation strategies for the COS.",
        "icon": "fa-solid fa-exclamation-triangle",
        "color": "#e53935",  # Red (Alert Color)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "risk_name", "placeholder": "Risk Name"},
                {"type": "textarea", "name": "risk_description", "placeholder": "Risk Description"},
                {"type": "text", "name": "mitigation_plan", "placeholder": "Mitigation Plan"}
            ],
            "explanation": "Detail potential risks and strategies to mitigate them for the COS.",
            "ai_context": "Identify potential risks and provide mitigation strategies for the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Risk Name", "field": "risk_name", "editor": "input"},
                {"title": "Risk Description", "field": "risk_description", "editor": "textarea"},
                {"title": "Mitigation Plan", "field": "mitigation_plan", "editor": "input"}
            ]
        }
    },
    "Opportunity": {
        "definition": "Identifies opportunities that can enhance the COS.",
        "icon": "fa-solid fa-lightbulb",
        "color": "#26c6da",  # Bright Cyan (Analogous)
        "modal_config": {
            "fields": [
                {"type": "text", "name": "opportunity_name", "placeholder": "Opportunity Name"},
                {"type": "textarea", "name": "opportunity_description", "placeholder": "Opportunity Description"},
                {"type": "text", "name": "exploitation_plan", "placeholder": "Exploitation Plan"}
            ],
            "explanation": "Detail opportunities and strategies to capitalize on them for the COS.",
            "ai_context": "Identify opportunities and provide strategies to exploit them for the COS."
        },
        "tabulator_config": {
            "columns": [
                {"title": "Opportunity Name", "field": "opportunity_name", "editor": "input"},
                {"title": "Opportunity Description", "field": "opportunity_description", "editor": "textarea"},
                {"title": "Exploitation Plan", "field": "exploitation_plan", "editor": "input"}
            ]
        }
    }
}

def get_valid_node_types():  
    return list(NODES.keys()) 

üîµ ce_cards.js:
// ce_cards.js (Refactored for Stability and Reliability)

import { 
    showLoadingSpinner, 
    hideLoadingSpinner,
    initializeTabulatorTable 
} from './base_functions.js'; 

// --- Helper Functions ---

/**
 * Extracts form data from a given form element into a key-value object.
 * @param {HTMLFormElement} form - The form element.
 * @returns {object} - An object containing the form's data.
 */
function getFormData(form) { 
    if (!form) return {};
    const formData = new FormData(form);
    const data = {};
    formData.forEach((value, key) => { data[key] = value; });
    console.log("getFormData() - Extracted:", data);
    return data;
}

/**
 * Clears all input fields within a given form.
 * @param {string} formSelector - The CSS selector for the form.
 */
function clearFormFields(formSelector) {
    const form = document.querySelector(formSelector);
    if (form) {
        form.querySelectorAll('input, textarea, select').forEach(field => {
            if (field.type !== 'checkbox' && field.type !== 'radio') {
                field.value = '';
            }
        });
        console.log(`clearFormFields() - Cleared fields for ${formSelector}`);
    }
}

/**
 * Saves all changes (form data and table data) made in the CE modal to the server.
 * @param {string} ceId - ID of the Conditional Element to save.
 */
function saveCEChanges(ceId) { 
    const modalElement = document.querySelector(`#ceModal-${ceId}`);
    if (!modalElement) {
        console.error(`Save failed: Modal for CE ID ${ceId} not found.`);
        return;
    }
    
    const table = modalElement._tabulator;
    const tableData = table ? table.getData() : [];
    
     const nonNullRows = tableData.filter(row =>
        Object.values(row).some(value => value !== null && (typeof value === 'string' ? value.trim() !== '' : value !== ''))
    );

    const updatedData = {
        table_data: nonNullRows, // Array of objects
        form_data: getFormData(modalElement.querySelector(`#ceForm-${ceId}`)) // Object
    };
    
    const modalInstance = bootstrap.Modal.getInstance(modalElement);
    const saveButton = modalElement.querySelector('.btn-save-changes');
    const originalButtonHtml = saveButton.innerHTML;
    saveButton.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Saving...`;
    saveButton.disabled = true;

    fetch(`/update_ce/${encodeURIComponent(ceId)}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedData)
    })
    .then(response => {
        if (!response.ok) { return response.json().then(err => { throw new Error(err.error || `Server Error: ${response.status}`); }); }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            console.log(`CE ID ${ceId} updated successfully`);
            modalElement.dataset.hasUnsavedChanges = 'false';
            if (modalInstance) modalInstance.hide();
        } else {
            throw new Error(data.error || 'Update failed on the server.');
        }
    })
    .catch(error => {
        console.error('Error updating CE:', error);
        alert(`An error occurred while saving: ${error.message}`);
    })
    .finally(() => {
        saveButton.innerHTML = originalButtonHtml;
        saveButton.disabled = false;
    });
}

// --- NODES Definition (Local copy for frontend logic) ---
const NODES = window.NODES || {};

// --- Main Entry Point ---

/**
 * Displays the Conditional Element modal using a direct, reliable method.
 * @param {string} modalHtml - The raw HTML for the modal.
 * @param {string} ceId - The ID of the Conditional Element.
 */
function displayCEModal(modalHtml, ceId) {
    const modalContainer = document.getElementById('dynamicModalContainer');
    if (!modalContainer) {
        console.error('Modal container element (#dynamicModalContainer) not found.');
        return;
    }
    
    // 1. Inject the HTML into the container.
    modalContainer.innerHTML = modalHtml;
    
    // 2. Immediately find the newly added modal element by its ID.
    const modalElement = document.getElementById(`ceModal-${ceId}`);
    if (!modalElement) {
        console.error(`Failed to find modal element #ceModal-${ceId} after injection.`);
        return;
    }

    // 3. Create a new Bootstrap modal instance from the element.
    const modal = new bootstrap.Modal(modalElement);
    const ceType = modalElement.dataset.nodeType || 'Default';

    // 4. Set up the Tabulator table and other event listeners once the modal is fully shown.
    modalElement.addEventListener('shown.bs.modal', () => {
        const tableElementId = `#dynamicTable-${ceId}`;
        // The initial data is now stored in a hidden script tag inside the modal HTML
        const initialTableDataElement = modalElement.querySelector('.initial-table-data'); 
        const initialTableData = initialTableDataElement ? JSON.parse(initialTableDataElement.textContent || '[]') : [];
        
        // Store the Tabulator instance on the modal element for later access
        modalElement._tabulator = initializeTabulatorTable(
            tableElementId, 
            initialTableData,
            tabulatorColumnsDefinition(ceType), 
            ceType, 
            modalElement
        );

        // Attach all other necessary button/form listeners inside the modal
        setupModalEventListeners(modalElement, ceId);
        
    }, { once: true }); // Use { once: true } to ensure this only runs once per show.

    // 5. Add a cleanup listener to remove the modal from the DOM when it's hidden.
    modalElement.addEventListener('hidden.bs.modal', () => {
        modalElement.remove();
    }, { once: true });

    // 6. Show the modal.
    modal.show();
}

/**
 * Defines the Tabulator table columns based on the CE type.
 * @param {string} ceType - The NodeType of the CE.
 * @returns {Array} - An array of column definition objects for Tabulator.
 */
function tabulatorColumnsDefinition(ceType) {
    const nodeConfig = NODES[ceType]?.tabulator_config;
    const specificColumns = nodeConfig?.columns || NODES['Default']?.tabulator_config?.columns || [];
    return [
        { formatter: "rowSelection", titleFormatter: "rowSelection", hozAlign: "center", headerSort: false, width: 40 },
        ...specificColumns
    ];
}

/**
 * Sets up event listeners for all interactive elements within the modal.
 * @param {HTMLElement} modalElement - The root DOM element of the modal.
 * @param {string} ceId - The ID of the current Conditional Element.
 */
function setupModalEventListeners(modalElement, ceId) {
    console.log(`setupModalEventListeners() - Attaching listeners for modal #${ceId}`);

    const addRowButton = modalElement.querySelector(`#addRowButton-${ceId}`);
    const saveChangesButton = modalElement.querySelector('.btn-save-changes');
    const deleteSelectedRowsButton = modalElement.querySelector(`#deleteSelectedRowsButton-${ceId}`);

    if (addRowButton) {
        addRowButton.addEventListener('click', () => {
            console.log("Add Row button clicked.");
            const table = modalElement._tabulator;
            if (!table) {
                console.error("Tabulator table instance not found on modalElement._tabulator");
                alert("Error: The resources table is not available.");
                return;
            }

            const form = modalElement.querySelector(`#ceForm-${ceId}`);
            const rowData = getFormData(form);

            if (!Object.values(rowData).some(val => val && val.trim() !== "")) {
                alert("Please fill in at least one field to add a resource.");
                return;
            }

            table.addRow(rowData, false);
            console.log("Row added to Tabulator in memory.");
            
            clearFormFields(`#ceForm-${ceId}`);
            modalElement.dataset.hasUnsavedChanges = 'true';
        });
    }

    if (saveChangesButton) {
        saveChangesButton.addEventListener('click', () => {
            console.log("Save Changes button clicked.");
            saveCEChanges(ceId);
        });
    }

    if(deleteSelectedRowsButton) {
        deleteSelectedRowsButton.addEventListener('click', () => {
            const table = modalElement._tabulator;
            if(table) {
                const selectedRows = table.getSelectedRows();
                if (selectedRows.length === 0) { alert("Please select rows to delete."); return; }
                selectedRows.forEach(row => row.delete());
                modalElement.dataset.hasUnsavedChanges = 'true';
                console.log(`${selectedRows.length} rows deleted.`);
            }
        });
    }
}

// Export the primary function that cos_table.js will call.
export { displayCEModal };

üìÜ models.py:
import os
import json
import uuid
from dotenv import load_dotenv
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine, Column, Integer, String, Text, ForeignKey, Date, inspect
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import scoped_session, sessionmaker, relationship

load_dotenv()

db = SQLAlchemy()
Base = declarative_base()

#  --- Removed _engine, SessionLocal, session here ---

class SSOL(db.Model):
    __tablename__ = 'ssol'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)  # Use UUID for SSOL id
    title = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)
    cos = relationship('COS', back_populates='ssol')

    def to_dict(self):
        return {
            'id': str(self.id),  # Return UUID as string
            'title': self.title,
            'description': self.description,
            'cos': [cos.to_dict() for cos in self.cos]
        }

class COS(db.Model):
    __tablename__ = 'cos'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    content = Column(Text, nullable=False)  # Changed to Text for larger content
    status = Column(String(50), nullable=False)
    accountable_party = Column(String(255), nullable=True)
    completion_date = Column(Date, nullable=True)
    ssol_id = Column(UUID(as_uuid=True), ForeignKey('ssol.id'), nullable=False)  # Use UUID for ssol_id
    ssol = relationship('SSOL', back_populates='cos')
    conditional_elements = relationship('CE', back_populates='cos')

    def to_dict(self):
        return {
            'id': str(self.id),
            'content': self.content,
            'status': self.status,
            'accountable_party': self.accountable_party,
            'completion_date': self.completion_date.isoformat() if self.completion_date else None,
            'ssol_id': str(self.ssol_id),  # Return UUID as string
            'conditional_elements': [ce.to_dict() for ce in self.conditional_elements]
        }

class CE(db.Model):
    __tablename__ = 'ce'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    content = Column(Text, nullable=False)   # Changed to Text for larger content
    node_type = Column(String(50), nullable=True)
    details = Column(Text, nullable=True)  # Keep this as Text (for Tabulator)
    cos_id = Column(UUID(as_uuid=True), ForeignKey('cos.id'), nullable=False)
    cos = relationship('COS', back_populates='conditional_elements')

    def to_dict(self):
        data = {
            'id': str(self.id),
            'content': self.content, # This might be the 'name' or 'topic' from form_data
            'node_type': self.node_type,
            'cos_id': str(self.cos_id),
            'form_data': {}, # Will be populated if main CE fields are distinct
            'table_data': [] # For Tabulator rows
        }
        if self.details:
            try:
                details_data = json.loads(self.details)
                # Assuming details_data could be a dict like {'form_data': {...}, 'table_data': [...]}
                # Or just the table_data if form_data is stored in other CE fields
                if isinstance(details_data, dict):
                    data['form_data'] = details_data.get('form_data', {})
                    data['table_data'] = details_data.get('table_data', [])
                elif isinstance(details_data, list): # If details only stores table_data
                    data['table_data'] = details_data
            except json.JSONDecodeError:
                # Handle case where details is not valid JSON or has different structure
                pass 
        # Populate form_data from direct CE attributes if they represent the "form"
        # This depends on how you map form fields to the CE model.
        # For example, if CE.content is "Research Topic":
        # data['form_data']['research_topic'] = self.content
        return data

# --- Moved engine and session creation to a function ---
def get_engine_and_session():
    engine = create_engine(os.environ.get('SQLALCHEMY_DATABASE_URI'), echo=True)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    session = scoped_session(SessionLocal)
    return engine, session

# --- Removed Base.metadata.create_all(_engine) --- Use Flask-Migrate
# In app.py (or wherever you initialize your app):
# from flask_migrate import Migrate
# migrate = Migrate(app, db) #  after db.init_app(app)

# Example of conditional table creation (ONLY if not using Flask-Migrate)
def create_tables_if_not_exist(engine):
     if not inspect(engine).has_table("ssol"):
          Base.metadata.create_all(engine)

üì± app.py:
# app.py (Corrected Circular Import)
import os
import logging
from flask import Flask
from flask_migrate import Migrate
from dotenv import load_dotenv
from models import db, get_engine_and_session, create_tables_if_not_exist
import colorlog  # Import colorlog
# from utilities import get_badge_class_from_status  # REMOVE THIS LINE

load_dotenv()

USE_DATABASE = os.environ.get('USE_DATABASE', 'False').lower() in ('true', '1', 't', 'y', 'yes')

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'a_good_default_secret_key')

# Configure colorlog
handler = colorlog.StreamHandler()
handler.setFormatter(colorlog.ColoredFormatter(
    '%(log_color)s%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    log_colors={
        'DEBUG':    'cyan',
        'INFO':     'green',
        'WARNING':  'yellow',
        'ERROR':    'red',
        'CRITICAL': 'red,bg_white',
    }
))

# Use Flask's logger and add the colorlog handler
logger = logging.getLogger()  # Get root logger (Flask uses this)
logger.setLevel(logging.INFO) # Change to INFO level
logger.addHandler(handler)

def get_badge_class_from_status(status):
   return {
       'Proposed': 'bg-info',
       'In Progress': 'bg-warning text-dark',
       'Completed': 'bg-success',
       'Rejected': 'bg-danger'
   }.get(status, 'bg-secondary')

if USE_DATABASE:
    app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('SQLALCHEMY_DATABASE_URI')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SQLALCHEMY_ECHO'] = os.environ.get('SQLALCHEMY_ECHO', 'False').lower() in ('true', '1', 't', 'y', 'yes')

    db.init_app(app)
    migrate = Migrate(app, db)

from routes import routes_bp
app.jinja_env.filters['get_badge_class_from_status'] = get_badge_class_from_status

app.register_blueprint(routes_bp, name='routes_bp')

if __name__ == '__main__':
    app.run(debug=True, port=5000) # Keep debug=True for Flask's debugger

üè™ store.py:
# store.py  
ssol_store = {}  
cos_store = {}  
ce_store = {}  

üß© ce_templates.py:
# ce_templates.py
from flask import current_app
import json
import logging
import uuid
from uuid import UUID
from store import ce_store
from bs4 import BeautifulSoup
from flask import render_template_string, current_app
from ce_nodes import NODES
from ai_service import generate_chat_response, get_grounded_data

def get_color_theme(hex_color):
    """Determines if a hex color is light or dark to choose a contrasting text color."""
    if not hex_color or not hex_color.startswith('#'):
        return 'dark'
    hex_color = hex_color.lstrip('#')
    try:
        r, g, b = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255
        return 'light' if luminance > 0.6 else 'dark'
    except (ValueError, IndexError):
        return 'dark'

BASE_MODAL_TEMPLATE = """
<div class="modal fade ceModal" id="ceModal-{{ ceId }}" tabindex="-1" aria-labelledby="ceModalLabel-{{ ceId }}" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content ce-modal" data-node-type="{{ ceType }}">
            <!-- Modal Header -->
            <div class="modal-header ce-modal-header" style="background-color: {{ node_color }};">
                <div class="node-icon" style="background-color: white;">
                    <i class="{{ icon_class }}" style="color: {{ node_color }};"></i>
                </div>
                <h5 class="modal-title ce-title" id="ceModalLabel-{{ ceId }}">
                    {{ ceType.replace('_', ' ').title() }}
                </h5>
                <span class="phase-name">// {{ phase_name.title() }} PHASE</span>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body ce-modal-body">
                <!-- SECTION 1: CONTEXT -->
                <div class="section">
                    <h2 class="section-heading">CONTEXT</h2>
                    <div class="sub-section">
                        <div class="context-label">Source Condition of Satisfaction (COS):</div>
                        <div class="content-block italic">
                            {{ cos_content_with_pills | safe }}
                        </div>
                    </div>
                    <div class="sub-section">
                        <div class="context-label">AI Contextual Insight for {{ ceType.replace('_', ' ').title() }}:</div>
                        <div class="content-block">
                            <p>{{ ai_generated_data.contextual_description or 'No AI contextual description available.' }}</p>
                        </div>
                    </div>
                </div>
                <!-- SECTION 2: DETAILS -->
                <div class="section">
                    <h2 class="section-heading">DETAILS</h2>
                    <form id="ceForm-{{ ceId }}">
                        <div class="form-grid">
                            {{ form_fields | safe }}
                        </div>
                    </form>
                    <div class="action-row">
                        <button type="button" class="btn btn-primary" id="addRowButton-{{ ceId }}"><i class="fas fa-plus"></i> Add to Resources</button>
                        <button type="button" class="btn btn-info" id="generateRowButton-{{ ceId }}"><i class="fas fa-magic"></i> Generate with AI</button>
                    </div>
                </div>
                <!-- SECTION 3: RESOURCES -->
                <div class="section">
                    <h2 class="section-heading">RESOURCES</h2>
                    <div id="dynamicTable-{{ ceId }}" class="tabulator-table resources-table"></div>
                    <div class="action-row">
                        <button type="button" class="btn btn-danger" id="deleteSelectedRowsButton-{{ ceId }}"><i class="fas fa-trash-alt"></i> Delete Selected</button>
                    </div>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer ce-modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary btn-save-changes" data-ce-id="{{ ceId }}">Save Changes</button>
            </div>
        </div>
    </div>
    <!-- Hidden script tag to pass initial data to JS -->
    <script type="application/json" class="initial-table-data" id="initial-data-{{ ceId }}">
        {{ table_data | tojson }}
    </script>
</div>
"""

def generate_form_field(field_type, field_name, field_value='', placeholder='', options=None):
    label = field_name.replace('_', ' ').title()
    field_html = f'<div class="form-group"><label for="{field_name}">{label}</label>'
    if field_type == 'textarea':
        field_html += f'<textarea class="form-control form-input" id="{field_name}" name="{field_name}" placeholder="{placeholder}">{field_value}</textarea>'
    else:
        field_html += f'<input type="{field_type}" class="form-control form-input" id="{field_name}" name="{field_name}" value="{field_value}" placeholder="{placeholder}">'
    field_html += '</div>'
    return field_html

def generate_form_fields(fields_config, form_data=None):
    if form_data is None: form_data = {}
    form_fields_html = ""
    for field in fields_config:
        field_name = field['name']
        field_value = form_data.get(field_name, '')
        form_fields_html += generate_form_field(
            field['type'], field_name, field_value, field.get('placeholder', '')
        )
    return form_fields_html

async def generate_dynamic_modal(ce_type, ce_data=None, cos_content=None, ai_generated_data=None, phase_name=None, phase_index=None, ce_store=None):
    node_info = NODES.get(ce_type, NODES['Default'])
    fields_config = node_info['modal_config']['fields']
    
    # Use AI generated data for form fields if no saved data exists
    saved_form_data = ce_data.get('form_data', {}) if ce_data else {}
    form_data_for_render = saved_form_data or ai_generated_data.get('fields', {})

    form_fields = generate_form_fields(fields_config, form_data_for_render)
    
    # Use AI generated table data if no saved data exists
    saved_table_data = ce_data.get('table_data', []) if ce_data else []
    table_data_for_render = saved_table_data or ai_generated_data.get('table_data', [])

    node_color = node_info.get('color', '#6c757d')
    icon_class = node_info.get('icon', 'fa-solid fa-question-circle')

    ces = list(ce_store.values()) if ce_store else []
    cos_content_with_pills = replace_ce_tags_with_pills(cos_content, ces)
    
    ce_id = ce_data.get('id', 'new_ce') if ce_data else 'new_ce'
    
    return render_template_string(
        BASE_MODAL_TEMPLATE,
        ceId=ce_id,
        ceType=ce_type,
        icon_class=icon_class,
        node_color=node_color,
        form_fields=form_fields,
        table_data=table_data_for_render,
        cos_content_with_pills=cos_content_with_pills,
        ai_generated_data=ai_generated_data,
        phase_name=phase_name,
        phase_index=phase_index
    )

def replace_ce_tags_with_pills(content, ces_metadata_for_pills=None):
    if not content: return ""
    soup = BeautifulSoup(content, 'html.parser')
    for ce_tag in soup.find_all('ce'):
        ce_type = ce_tag.get('type', 'Default')
        ce_text = ce_tag.text
        node_info = NODES.get(ce_type, NODES['Default'])
        node_color = node_info.get('color', '#95a5a6')
        node_icon = node_info.get('icon', 'fa-solid fa-question-circle')
        ce_uuid = str(uuid.uuid4())

        pill_group = soup.new_tag('div', attrs={
            'class': 'btn-group ce-pill', 'role': 'group',
            'data-ce-id': ce_uuid, 'data-ce-type': ce_type,
            'style': f'--node-color: {node_color};'
        })
        icon_tag_part = soup.new_tag('span', attrs={'class': 'btn ce-pill-icon-tag'})
        icon_element = soup.new_tag('i', attrs={'class': f'{node_icon}'})
        icon_tag_part.append(icon_element)
        text_tag_part = soup.new_tag('span', attrs={'class': 'btn ce-pill-text', 'tabindex': '-1'})
        text_tag_part.string = ce_text
        pill_group.append(icon_tag_part)
        pill_group.append(text_tag_part)
        ce_tag.replace_with(pill_group)
    return str(soup)

async def generate_ai_data(cos_text, ce_id, ce_type, ssol_goal, existing_ces=None):
    if existing_ces is None: existing_ces = []
    
    node_info = NODES.get(ce_type, NODES['Default'])
    ai_context = node_info.get('modal_config', {}).get('ai_context', '')
    modal_fields = node_info.get('modal_config', {}).get('fields', [])
    field_definitions = json.dumps({field['name']: field.get('placeholder', '') for field in modal_fields})

    prompt_template = f"""
[ROLE & GOAL]
You are a specialized data extraction and generation model. Your sole purpose is to populate a structured JSON object based on the context provided. You must be precise, factual, and strictly adhere to the output format.

[RULES]
1. Your entire response MUST be a single, raw JSON object.
2. DO NOT include any conversational text, explanations, or markdown formatting like ```json.
3. Ensure all string values within the JSON are properly escaped. Do not use invalid escape sequences.
4. If you cannot find relevant information for a field, provide an empty string "".
5. The 'fields' object MUST contain all requested keys, even if their values are empty.

[CONTEXT]
- SSOL Goal: "{ssol_goal}"
- Parent COS Text: "{cos_text}"
- CE Type: "{ce_type}"
- CE Field Definitions: {field_definitions}
- AI Context for this CE Type: "{ai_context}"

[TASK & FORMAT]
Analyze the provided [CONTEXT] to generate the required data. Use your search tool to find this information. Populate the following JSON structure precisely:

{{
  "summary": "<A one-sentence summary of this element's purpose.>",
  "contextual_description": "<A 2-3 sentence paragraph explaining how this CE fits into the larger goal.>",
  "fields": {{
    {', '.join([f'"{field["name"]}": "<Value for {field["name"]} based on your search>"' for field in modal_fields])}
  }},
  "table_data": [
    {{
      "source_title": "<Title of the primary web page or document found>",
      "source_url": "<URL of the source>",
      "source_snippet": "<A relevant snippet from the source, properly escaped.>",
      {', '.join([f'"{field["name"]}": "<Value for {field["name"]} extracted from this specific source>"' for field in modal_fields])}
    }}
  ],
  "attribution": "Data retrieved via Google Search using Gemini API."
}}
"""
    
    grounded_data = await get_grounded_data(prompt_template)
    
    if grounded_data and (grounded_data.get('fields') or grounded_data.get('table_data')):
        current_app.logger.info("Successfully retrieved and parsed grounded data.")
        return grounded_data
    
    current_app.logger.warning("Grounded data failed or was empty. Falling back to generative AI.")
    try:
        fallback_prompt = prompt_template.replace(
            "Use your search tool to find this information.", 
            "Generate plausible and contextually relevant data to populate this structure."
        ).replace(
            '"table_data": [', '"table_data": []' # Instruct fallback to not generate table data
        )
        messages = [{"role": "user", "content": fallback_prompt}]
        response_text = await generate_chat_response(messages, role="AI Fallback", task="Generate CE Data")
        
        if response_text:
            return json.loads(response_text)
        else:
            raise ValueError("Fallback AI returned an empty response.")
            
    except Exception as e:
        current_app.logger.error(f"Error during generative AI fallback: {e}", exc_info=True)
        return {
            "summary": "Error generating AI data.",
            "contextual_description": "The AI model failed to generate a valid response after multiple attempts.",
            "fields": {field['name']: "" for field in modal_fields},
            "table_data": [],
            "attribution": ""
        }

üé® styles.css:
/* styles.css - Complete and Consolidated Styles (Refactored for Bootstrap Table COS Layout & CE Modals) */

/* ================================================== */
/* ==============  1. Base Typography & Root Vars ==== */
/* ================================================== */
:root {
  --phase-0: #e91e63; /* Discovery */
  --phase-1: #00bcd4; /* Engagement */
  --phase-2: #9c27b0; /* Action */
  --phase-3: #ffc107; /* Completion */
  --phase-4: #66bd0e; /* Legacy */
}

body {
  font-family: 'Jost', sans-serif;
  font-weight: 400;
  background-color: #f5f5f5;
  color: #333;
}

h1 {
  font-family: 'Mr Dafoe', cursive;
  font-weight: 400;
  color: #ffa726;
  text-shadow: 1px 1px 0px #e91e63;
  font-size: 3.0rem;
  text-align: center;
  margin-top: 1rem;
  margin-bottom: 1rem;
}

h2, .section-heading {
  font-family: 'Unica One', sans-serif;
  font-weight: 500;
  text-transform: uppercase;
  color: #104a3a;
  text-shadow: 1px 1px 0px #000000; /* Consider a more subtle shadow or none */
}

/* Specific h2 styling for outcome page sections if needed */
.outcome-header h2,
.row > h1 { /* Targeting the "Phases & Conditions of Satisfaction" h1 */
    margin-top: 1.5rem;
    margin-bottom: .5rem;
}

.section-heading { /* Used in CE Modals */
    font-size: 1.5rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e0e0e0;
}

h3, .sub-heading {
  font-family: 'Unica One', sans-serif;
  font-weight: 500;
  text-transform: uppercase;
  color: #555;
}

.sub-heading { /* Used in CE Modals */
    font-family: 'Unica One', sans-serif;
    font-weight: 500;
    color: #333;
    font-size: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    padding-bottom: 0.25rem;
}


/* ================================================== */
/* ==============  2. Navigation Bar  =============== */
/* ================================================== */
nav.navbar {
  background-image: linear-gradient(120deg, #673ab7 0%, #00bcd4 100%);
  border-bottom: 5px solid #e91e63;
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

nav.navbar .navbar-brand {
  color: #ffffff;
  font-weight: 500;
  font-size: 4.5rem; 
  padding-top: 0;
  padding-bottom: 0;
}

.navbar-brand h1 { /* If h1 is directly in navbar-brand */
  font-size: inherit; /* Inherit from .navbar-brand for consistency */
  color: #ffa726; /* Match general h1 color */
  text-shadow: 1px 1px 0px #e91e63; /* Match general h1 shadow */
  margin-bottom: 0;
  line-height: 1;
}

.structured-speculation {
  display: block;
  font-family: 'Unica One', sans-serif;
  font-weight: 700;
  text-align: center;
  font-size: 1rem; /* Adjusted for better fit */
  text-transform: uppercase;
  color: rgba(0, 0, 0, 0.85); /* Lighter for better contrast on gradient */
  letter-spacing: 0.7em; /* Adjusted */
  line-height: 1;
  margin-top: 5px; /* Pull up slightly under the main brand text */
}


/* ================================================== */
/* =========  3. Retro-futuristic Background Pattern ======== */
/* ================================================== */
body:before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: radial-gradient(circle at 10% 20%, #e91e63 10%, transparent 10%),
                    radial-gradient(circle at 90% 20%, #00bcd4 10%, transparent 10%),
                    radial-gradient(circle at 40% 60%, #9c27b0 10%, transparent 10%),
                    radial-gradient(circle at 60% 80%, #ffc107 10%, transparent 10%);
  background-size: 40px 40px;
  background-attachment: fixed;
  opacity: 0.3; /* Slightly more subtle */
  z-index: -1;
}


/* ================================================== */
/* ===========  4. General Container & Card Styles ========== */
/* ================================================== */
.container { /* Main page container */
  background-color: rgba(255, 255, 255, 0.95); /* Slightly transparent white for depth */
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-top: 20px;
  margin-bottom: 20px;
}

.card { /* General card styling, like for Goal Selection */
  background-color: #ffffff;
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
  transition: box-shadow 0.3s ease-in-out;
}

.card:hover {
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
}

.card-header,
.card-footer { /* Bootstrap default card header/footer */
  background-color: #673ab7;
  color: #ffffff;
  border-radius: 8px 8px 0 0; /* Match card radius if header is at top */
}
.card-footer {
  border-radius: 0 0 8px 8px;
}


/* Retro-futuristic Card (Specific card style for goal selection cards) */
.retro-futuristic-card {
  border: 3px solid #00bcd4;
  height: 100%;
}
.retro-futuristic-card.non-compliant { border-color: red; }
.retro-futuristic-card.non-compliant:hover { box-shadow: 0 8px 16px rgba(196, 93, 93, 0.2); }
.retro-futuristic-card.non-compliant .card-body { box-shadow: inset 0 0 10px rgba(196, 93, 93, 0.5); }


/* ================================================== */
/* ===============  5. Button Styles  ================ */
/* ================================================== */
.btn { /* General button enhancements */
    transition: all 0.2s ease-in-out;
}
.btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.btn-primary {
  background-color: #ff5722;
  border-color: #ff5722;
}
.btn-primary:hover, .btn-primary:focus, .btn-primary:active {
  background-color: #e64a19 !important; /* Ensure override */
  border-color: #d84315 !important;
}

.btn-danger {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}
.btn-danger:hover {
  color: #fff;
  background-color: #c82333 !important;
  border-color: #bd2130 !important;
}
.btn-info { /* Used for PDF button */
    background-color: #17a2b8;
    border-color: #17a2b8;
}
.btn-info:hover {
    background-color: #138496 !important;
    border-color: #117a8b !important;
}
.btn-success { /* Used for Add COS, Update COS */
    background-color: #28a745;
    border-color: #28a745;
}
.btn-success:hover {
    background-color: #218838 !important;
    border-color: #1e7e34 !important;
}


/* ================================================== */
/* ==============  6. Outcome Page Styles  ============ */
/* ================================================== */
.outcome-header { /* Row containing image/domain and summary */
  margin-bottom: 2rem;
}
.outcome-header .col-md-4 h2 { /* Specific to H2s in the left column like DOMAIN, FULFILLED GOAL */
    text-align: center;    /* Align these to center */
    font-size: 1.5rem;     /* Keep or adjust existing font-size */
    margin-bottom: 0.5rem; /* Keep or adjust existing margin */
}
.outcome-header .col-md-8 h1 { /* For the H1 in the right column (e.g., Preliminary Structured Solution) */
    text-align: center;      /* Keep this left-aligned or adjust as desired */
}


/* ================================================== */
/* ===========  7. Loading Spinner Styles  ============= */
/* ================================================== */
.loading-spinner-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.3);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.spinner-box {
  width: 50vw; /* Responsive width for the box */
  max-width: 550px; /* Maximum width for the box */
  height: 30vh; /* Responsive height for the box */
  max-height: 175px; /* Maximum height for the box */
  background-color: rgba(255, 255, 255, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
  padding: 20px;
}

.spinner-container { /* This is implicitly the container for icon and text */
  display: flex;
  flex-direction: column;
  align-items: center;
}

.spinner-text {
  margin-top: 20px;
  font-family: 'Unica One', sans-serif;
  text-transform: uppercase;
  color: rgba(0, 0, 0, 0.75);
  letter-spacing: 0.4em;
  text-align: center;
  white-space: nowrap; /* Prevent text wrapping */
}

/* Animations in section 17 */


/* ================================================== */
/* ===========  8. Refresh Icon Animation  =========== */
/* ================================================== */
#generate-new-goals .refresh-icon { display: inline-block; transition: transform 0.5s ease; }
#generate-new-goals:hover .refresh-icon { transform: rotate(360deg); }


/* ================================================== */
/* ============  9. Domain Icon Styles  ============== */
/* ================================================== */
.domain-text {
  font-family: 'Unica One', sans-serif;
  text-transform: uppercase;
  font-size: 1.3rem; /* Slightly adjusted */
  color: #555;
}
.outcome-header .fa-3x { /* Domain icon on outcome page */
    color: #00bcd4; /* Match a theme color */
}


/* ================================================== */
/* ==========  10. Report Section Title (Unused) ======== */
/* ================================================== */
/* .report-section-title { ... } */


/* ================================================== */
/* == 11. Phase Accordion & COS Table Styles == */
/* ================================================== */
.accordion-header {
  color: #ffffff;
  border-radius: 5px 5px 0 0; /* Rounded top corners */
  margin-bottom: 0; /* No margin if border is directly on accordion-item */
}
.accordion-item {
    margin-bottom: 10px; /* Space between accordion items */
    border-radius: 5px;
    border: 1px solid #ddd; /* Overall border for accordion item */
}
.accordion-button {
  text-transform: uppercase;
  font-family: 'Unica One', sans-serif;
  font-weight: 500;
  font-size: 1rem;
  text-shadow: 1px 1px 0px rgba(0,0,0,0.3);
  color: #ffffff;
  border-radius: 4px 4px 0 0 !important;
}

.accordion-button:focus { outline: none; box-shadow: none; }
.accordion-button:not(.collapsed) { color: #ffffff; }

.accordion-body.phase-table-container { /* Where the table resides */
  background-color: #ffffff; /* White background for table area */
  border-radius: 0 0 5px 5px; /* Rounded bottom corners */
  padding: 15px;
  /* border-top: none; */ /* Top border is handled by header */
}


/* COS Table Styling */
.phase-table {
    margin-bottom: 1rem; /* Space below table before "Add COS" button */
    border-collapse: separate; /* Allows border-spacing */
    border-spacing: 0; /* Remove default spacing if any */
}
.phase-table thead th {
    background-color: #f8f9fa; /* Light grey for table header */
    color: #343a40;
    border-bottom-width: 2px; /* Bootstrap default */
    font-family: 'Jost', sans-serif;
    font-weight: 600;
    font-size: 0.9rem;
    text-transform: uppercase;
    vertical-align: middle;
}
.phase-table tbody tr.cos-row { /* Each COS row */
    background-color: #fff; /* Ensure white background for rows */
}
.phase-table tbody tr.cos-row:hover {
    background-color: #f1f8ff; /* Light blue hover for rows */
}
.phase-table td {
    vertical-align: middle; /* Default vertical alignment for all cells */
    padding: 0.75rem; /* Standard Bootstrap padding */
    font-size: 0.9rem;
}

/* Specific Cell Styling */
.status-cell { text-align: center; } /* Center the status pill */
.cos-content-cell .cos-content-display {
    line-height: 1.6;
    word-break: break-word; /* Ensure long content wraps */
}
.cos-content-cell .cos-content-display .ce-pill {
    margin-right: 4px;
    margin-bottom: 4px; /* For wrapping */
}
.cos-content-textarea { /* Textarea when editing COS content */
  width: 100%;
  border-radius: 4px;
  border: 1px solid #ced4da;
  padding: 0.5rem 0.75rem;
  font-size: 0.9rem;
  min-height: 80px; /* Adjust as needed */
}
.actions-cell .btn-group.cos-actions { /* Ensure buttons in group are tight */
    white-space: nowrap;
}
.actions-cell .btn-group.cos-actions .btn {
    margin-right: 3px; /* Small space between buttons */
}
.actions-cell .btn-group.cos-actions .btn:last-child {
    margin-right: 0;
}

.add-cos.btn { /* "Add Condition of Satisfaction" button */
    margin-top: 0.5rem; /* Space above it */
}


/* ================================================== */
/* =========  12. Status & CE Pill Styles  =========== */
/* ================================================== */
.status-pill {
  color: #fff !important;
  text-align: center;
  text-transform: uppercase;
  font-size: 0.65em; /* Smaller for table cell fit */
  font-weight: 600; /* Bold */
  text-shadow: 1px 1px 0px rgba(0, 0, 0, 0.2);
  padding: .3em .7em;
  border-radius: 10rem;
  line-height: 1; /* Prevent extra space */
  display: inline-block; /* Ensure it behaves well in flow */
}

/* --- REFINED: Icon Tag Pill Styling --- */
.ce-pill.btn-group {
  margin: 2px 4px 2px 0;
  vertical-align: middle;
  border-radius: 6px;
  overflow: hidden; /* This is the key to the seamless look! */
  border: 1.5px solid var(--node-color, #6c757d);
  display: inline-flex;
  cursor: pointer;
  transition: box-shadow 0.2s ease;
}
.ce-pill.btn-group:hover {
  box-shadow: 0 2px 8px rgba(0,0,0,0.15);
}

/* Remove Bootstrap's default btn-group behavior that adds space */
.ce-pill.btn-group > .btn {
  margin-left: 0 !important;
}

/* Common styles for the tags inside the pill */
.ce-pill .btn.ce-pill-icon-tag,
.ce-pill .btn.ce-pill-text {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: .20rem .70rem;
  font-size: 0.85rem;
  font-weight: 500;
  line-height: 1.4;
  border: none !important;
  box-shadow: none !important;
  transition: filter 0.2s ease, background-color 0.2s ease;
  border-radius: 25; /* Remove individual radius */
}

/* Specific style for the icon part */
.ce-pill .btn.ce-pill-icon-tag {
  background-color: var(--node-color, #6c757d);
  color: white;
  /* The dividing line is now handled by the natural separation of the elements */
}

/* Specific style for the text part */
.ce-pill .btn.ce-pill-text {
  background-color: #ffffff;
  color: #212529;
}

/* Hover effect */
.ce-pill.btn-group:hover .ce-pill-icon-tag {
   filter: brightness(95%);
}
.ce-pill.btn-group:hover .ce-pill-text {
   background-color: #f8f9fa;
}


/* ================================================== */
/* ==========  13. Badge Color Overrides  ============ */
/* ================================================== */
.bg-info { background-color: #007bff !important; } /* Bootstrap 4 blue */
.bg-warning { color: #212529 !important; background-color: #ffc107 !important; }
.bg-success { background-color: #28a745 !important; }
.bg-danger { background-color: #dc3545 !important; }
.bg-secondary { background-color: #6c757d !important; }


/* ================================================== */
/* ===========  14. Action Column Styles  ============ */
/* ================================================== */
.actions-header { /* th for Actions column */
  white-space: nowrap;
  min-width: 210px; /* Adjusted for 5 small buttons with icons */
}
.actions-cell { /* td for Actions column */
    white-space: nowrap; /* Keep buttons on one line if possible */
}
.actions-cell .btn-group {
    flex-wrap: nowrap; /* Prevent button group from wrapping */
}


/* ================================================== */
/* == 15. Card Grid Layout (Goal Selection - Unchanged) == */
/* ================================================== */
.card-container { flex-wrap: nowrap !important; justify-content: center; }
.card { display: flex; flex-direction: column; height: 100%; }
.card-body { flex-grow: 1; display: flex; flex-direction: column; }
.card-upper-content { flex-grow: 1; display: flex; flex-direction: column; }
.card-content { display: flex; flex-direction: column; justify-content: space-between; height: 100%; }
.goal-selection-form { margin-top: auto; padding-top: 1rem; }

/* ================================================== */
/* ======  16. Generated Image & Placeholder Styles  ==== */
/* ================================================== */
.ssol-title {
    text-align: center; margin-bottom: 10px; display: block;
    font-family: 'Unica One', sans-serif; font-weight: 500;
    font-size: 3.5rem; /* Changed from 2.8rem */
    color: #326eb6; text-transform: uppercase; text-shadow: 1px 1px 0px #000000;
    letter-spacing: 0.2em; /* Changed from 0.15em */
    line-height: 90%; /* Changed from 1 */
}

.image-wrapper {
    position: relative; /* For potential future overlay elements if any */
    display: inline-block; /* Or block, depending on desired centering within col-md-4 */
    width: 100%; /* Make wrapper take full width of its column */
    max-width: 300px; /* Max width of the image itself */
    aspect-ratio: 1 / 1; /* Enforce a square aspect ratio for the space */
    background-color: #f0f0f0; /* Light background for the reserved space */
    border-radius: 25px; /* Match image border-radius */
    margin-bottom: 20px; /* Consistent margin */
    overflow: hidden; /* If image is not perfectly square, it will be contained */
}

.ssol-dynamic-image { /* Targets the single image tag by its new class */
    display: block; /* Remove extra space below inline images */
    width: 100%;    /* Image fills the wrapper width */
    height: 100%;   /* Image fills the wrapper height */
    object-fit: cover; /* Scales the image to maintain its aspect ratio while filling the element‚Äôs entire content box. If the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit. */
    border-radius: 25px; /* Rounded corners for the image itself */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow */
    /* No opacity or transition here, it's a direct src change */
}

.placeholder-image, .generated-image {
    position: absolute; top: 0; left: 0; width: 100%; height: 100%;
    object-fit: cover; 
    border-radius: 25px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}
.placeholder-image { opacity: 1; z-index: 1; transition: opacity 0.5s ease-out; }
.placeholder-image.hidden { opacity: 0; z-index: -1; }
.generated-image {
    opacity: 0; z-index: 2; transition: opacity 0.5s ease-in;
    background-color: #eee; 
}
.generated-image.loaded { opacity: 1; }

/* ================================================== */
/* ========  17. Consolidated Fade Animations  ========= */
/* ================================================== */
@keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } }
.fade-in { opacity: 0; transition: opacity 1s ease-in; }
.fade-in.loaded { opacity: 1; }

@keyframes fadeInBlur { 0% { opacity: 0; filter: blur(5px); } 100% { opacity: 1; filter: blur(0); } }
.loading-spinner-overlay.fade-in { animation: fadeInBlur 0.5s ease-in-out forwards; }

@keyframes fadeOutBlur { 0% { opacity: 1; filter: blur(0px); } 100% { opacity: 0; filter: blur(5px); } }
.loading-spinner-overlay.fade-out { animation: fadeOutBlur 0.5s ease-in-out forwards; }

@keyframes fadeInScale { 0% { opacity: 0; transform: scale(0.95); } 100% { opacity: 1; transform: scale(1); } } /* Adjusted scale */
@keyframes fadeOutScale { 0% { opacity: 1; transform: scale(1); } 100% { opacity: 0; transform: scale(0.95); } } /* Adjusted scale */
.modal.fade-in { animation: fadeInScale 0.3s forwards; } /* Faster modal fade */
.modal.fade-out { animation: fadeOutScale 0.3s forwards; }

@keyframes wipeOn { 0% { opacity: 0; transform: scaleX(0); } 100% { opacity: 1; transform: scaleX(1); } }
.text-wipe-on span { display: inline-block; overflow: hidden; animation: wipeOn 0.1s forwards; opacity: 0; transform-origin: left; }

.text-fade-in { opacity: 0; transition: opacity 0.5s ease-in-out; }
.fonts-loaded .text-fade-in { opacity: 1; }


/* ================================================== */
/* == 18. Text Input Styles (Goal Input - Unchanged) == */
/* ================================================== */
.user-input { font-weight: bold; font-size: 1.2rem; }
.user-input-display { font-weight: bold; font-size: 1.2rem; }
.user-input-edit {
  font-weight: bold; font-size: 1.2rem; border: none;
  width: 100%; background-color: transparent; padding: 0.25rem;
}
.user-input-edit:focus {
  background-color: #e9ecef; outline: none;
  box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

/* ================================================== */
/* == 19. Table Row Styles (Goal Input - Unchanged) === */
/* ================================================== */
.table-bordered > thead > tr > th { border-bottom: 2px dotted #dee2e6; }


/* ================================================== */
/* ==========  20. Editing State Styles (COS Table)  ============= */
/* ================================================== */
/* These control visibility of display spans vs edit inputs within table cells */
.cos-row td .cos-content-edit,
.cos-row td .cos-accountable-party-edit,
.cos-row td .cos-completion-date-edit,
.cos-row td select.status-edit-select {
    display: none; /* Hide edit fields by default */
}

.cos-row[data-editing="true"] td .cos-content-display,
.cos-row[data-editing="true"] td .cos-accountable-party-display,
.cos-row[data-editing="true"] td .cos-completion-date-display,
.cos-row[data-editing="true"] td .status-pill { /* Hide display spans/pill in edit mode */
    display: none !important;
}

.cos-row[data-editing="true"] td .cos-content-edit,
.cos-row[data-editing="true"] td .cos-accountable-party-edit,
.cos-row[data-editing="true"] td .cos-completion-date-edit,
.cos-row[data-editing="true"] td select.status-edit-select {
    display: block; /* Show edit fields in edit mode */
    width: 100%; /* Make inputs take full cell width */
}
.cos-row[data-editing="true"] td select.status-edit-select {
    font-size: 0.8rem; /* Smaller font for select in table */
}


/* Button visibility toggling (JS also helps with d-none, this is CSS backup/primary) */
.cos-row .update-cos-button,
.cos-row .cancel-cos-button {
    display: none;
}
.cos-row[data-editing="true"] .edit-cos-button,
.cos-row[data-editing="true"] .delete-cos-button, /* Hide delete/analyze during edit */
.cos-row[data-editing="true"] .analyze-cos-button {
    display: none !important;
}
.cos-row[data-editing="true"] .update-cos-button,
.cos-row[data-editing="true"] .cancel-cos-button {
    display: inline-block !important;
}


/* ================================================== */
/* ===========  21. Modal Custom Styling  ============ */
/* ================================================== */
.modal-content {
  border-radius: 10px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
  border: 2px solid transparent; max-height: 90vh;
  display: flex; flex-direction: column;
}
.modal-header, .ce-modal-header {
  display: flex; align-items: center; justify-content: space-between;
  padding: 1rem 1.5rem; border-top-left-radius: 8px; border-top-right-radius: 8px;
  position: relative; color: white;
}
.ce-modal-header .node-icon {
  background-color: white; border-radius: 5px; padding: 8px 10px;
  margin-right: 1rem; flex-shrink: 0; display: inline-flex;
  align-items: center; justify-content: center;
}
.ce-modal-header .node-icon i { font-size: 1.25rem; }

.modal-title, .ce-modal-header .modal-title.ce-title {
  font-family: 'Unica One', sans-serif; font-weight: 500; text-transform: uppercase;
  text-shadow: 1px 1px 1px rgba(0,0,0,0.4); color: white;
  font-size: 1.5rem; margin-right: 0.5rem; line-height: 1.2;
}
.ce-modal-header .modal-title.ce-title { font-size: 1.6rem; }

.ce-modal-header .phase-name {
  font-family: 'Jost', sans-serif; font-size: 0.85rem; font-style: italic;
  text-transform: uppercase; color: rgba(255, 255, 255, 0.9);
  margin-left: auto; margin-right: 1rem; white-space: nowrap; line-height: 1.2;
}
.modal-header .close-button, .ce-modal-header .close-button {
  background: transparent; border: none; color: white; font-size: 1.75rem;
  opacity: 0.8; padding: 0.25rem 0.75rem; line-height: 1; text-shadow: none; margin-left: 0.5rem;
}
.modal-header .close-button:hover, .ce-modal-header .close-button:hover { opacity: 1; }

.modal-body, .ce-modal-body {
  flex-grow: 1; overflow-y: auto; padding: 1.5rem;
  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.05);
}
.ce-modal-body { padding: 2rem; }
.ce-modal-body .section { margin-bottom: 2rem; }
.ce-modal-body .section:last-child { margin-bottom: 0.5rem; }
.ce-modal-body .sub-section { margin-bottom: 1.5rem; }

.modal-body .context-label {
  font-family: 'Unica One', sans-serif; font-size: 1rem; font-weight: 500;
  color: #104a3a; margin-bottom: 0.5rem; text-transform: uppercase; display: block;
}
.modal-body .content-block {
  background-color: #f8f9fa; border-left: 3px solid #dee2e6;
  padding: 0.75rem 1rem; margin-bottom: 1rem; color: #212529; line-height: 1.5;
}
.modal-body .content-block.italic { font-style: italic; }
.modal-body .definition-text { font-size: 0.9rem; color: #495057; line-height: 1.45; margin-bottom: 0.75rem; }

.modal-footer { padding: 1rem 1.5rem; background-color: #f8f9fa; border-top: 1px solid #dee2e6; }
.btn-save-changes {
  background-color: var(--bs-primary); border-color: var(--bs-primary);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
.btn-save-changes:hover { box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); }

/* ================================================== */
/* =========  22. Tabulator Table Styling  ============ */
/* ================================================== */
.tabulator {
  border-radius: 5px; box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
  margin-bottom: 1.5rem; border: 1px solid #dee2e6;
}
.resources-table { margin-top: 1.5rem; margin-bottom: 1.5rem; max-height: 350px; }
.tabulator-header {
  font-family: 'Jost', sans-serif; font-weight: 600; font-size: 0.85em;
  border-bottom: 2px solid #adb5bd; background-color: #f8f9fa; color: #343a40;
}
.tabulator-header .tabulator-col { border-right: 1px solid #e9ecef; background-color: transparent; }
.tabulator-header .tabulator-col:last-child { border-right: none; }
.tabulator-row { background-color: #ffffff; border-bottom: 1px solid #f1f3f5; }
.tabulator-row:nth-child(even) { background-color: #fbfcfd; }
.tabulator-row:hover { background-color: #e9f2fa; }
.tabulator-row:last-child { border-bottom: none; }
.tabulator-cell {
  padding: 10px 12px; border: none; white-space: normal; overflow: visible;
  word-wrap: break-word; height: auto; font-size: 0.9rem;
}
/* Dynamic Phase Colors for Tabulator Headers */
[data-phase-index="0"] .tabulator-header { border-bottom-color: var(--phase-0) !important; }
[data-phase-index="1"] .tabulator-header { border-bottom-color: var(--phase-1) !important; }
[data-phase-index="2"] .tabulator-header { border-bottom-color: var(--phase-2) !important; }
[data-phase-index="3"] .tabulator-header { border-bottom-color: var(--phase-3) !important; }
[data-phase-index="4"] .tabulator-header { border-bottom-color: var(--phase-4) !important; }

.form-group { font-weight: normal; font-size: 0.9em; margin-bottom: 0.75rem; }
.form-group label {
    display: block; margin-bottom: 0.35rem; font-family: 'Jost', sans-serif;
    font-weight: 500; font-size: 0.85rem; color: #454545;
}


/* ================================================== */
/* =======  23. Hidden Text Utility Class  =========== */
/* ================================================== */
.hidden-text { opacity: 0; }


/* ================================================== */
/* =======  24. CE Modal Specific Styles ============ */
/* ================================================== */
.modal-dialog.ce-modal { max-width: 90%; width: auto; margin: 1.75rem auto; }
.ce-modal-body .section-heading {
    font-size: 1.4rem; color: #104a3a; text-shadow: none;
    border-bottom: 1px solid #dee2e6; padding-bottom: 0.5rem; margin-bottom: 1.5rem;
}
.ce-modal-body .sub-heading {
    font-family: 'Unica One', sans-serif; font-weight: 500; color: #333;
    font-size: 1rem; text-transform: uppercase; letter-spacing: 0.05em;
    margin-top: 1.5rem; margin-bottom: 0.75rem;
}
.ce-modal-body .form-grid {
    display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1rem 1.5rem; margin-bottom: 2rem;
}
.ce-modal-body .form-group label { font-size: 0.9rem; font-weight: 500; color: #343a40; margin-bottom: 0.4rem; }
.ce-modal-body .form-input, .ce-modal-body .form-control,
.ce-modal-body .form-textarea, .ce-modal-body .form-select {
    padding: 0.5rem 0.75rem; font-size: 0.95rem; border-radius: 0.25rem;
    border: 1px solid #ced4da; width: 100%;
}
.ce-modal-body .form-textarea { min-height: 100px; }
.ce-modal-body .action-row {
    margin-top: 1.5rem; margin-bottom: 1.5rem; display: flex;
    flex-wrap: wrap; gap: 0.75rem;
}
.ce-modal-body .action-row .btn { padding: 0.5rem 1rem; font-size: 0.9rem; }
.ce-modal-footer { padding: 1rem 1.5rem; background-color: #f8f9fa; border-top: 1px solid #dee2e6; }
.ce-modal-body .ce-pills-container { margin-top: 1rem; display: flex; flex-wrap: wrap; gap: 8px 10px; }
.ce-modal-body .ce-pill { padding: 5px 12px; font-size: 0.9rem; }

/* Ensure d-none utility class works as expected */
.d-none { display: none !important; }

/* ================================================== */
/* =========  25. Goal Card Description Fix  ========= */
/* ================================================== */
.goal-description {
  text-align: left; /* Use left-align for natural word spacing and readability */
}
